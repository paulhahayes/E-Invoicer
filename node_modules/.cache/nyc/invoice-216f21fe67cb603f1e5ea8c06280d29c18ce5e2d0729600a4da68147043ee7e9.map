{"version":3,"file":"/Users/yusramahomed/Desktop/SENG2021/se2021-23t1-einvoicing-api-h10a_CHEESECAKE-storage-api/src/functions/invoice.ts","sources":["/Users/yusramahomed/Desktop/SENG2021/se2021-23t1-einvoicing-api-h10a_CHEESECAKE-storage-api/src/functions/invoice.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,iCAAgC;AAEhC,+CAAwC;AAExC,8DAA+B;AAC/B,4DAAoC;AACpC,IAAM,WAAW,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC,WAAW,CAAC;AAElD,IAAM,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAEjC,SAAe,kBAAkB,CAAC,KAAa;;;;;wBAEhC,qBAAM,aAAE,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAA;;oBAAzC,IAAI,GAAG,SAAkC;oBAE/C,IAAI;wBACF,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;wBAClB,YAAY,GAAG,sBAAG,CAAC,MAAM,CAAC,KAAK,EAAE,YAAY,CAAmB,CAAC;wBACvE,qBAAqB;wBACrB,eAAe;wBACf,4CAA4C;wBAC5C,IAAI;wBAEJ,mBAAmB;wBACnB,sBAAO,YAAY,CAAC,MAAM,EAAC;qBAC5B;oBAAC,WAAM;wBACN,MAAM,IAAA,qBAAS,EAAC,GAAG,EAAE,gBAAgB,CAAC,CAAC;qBACxC;;;;;CACF;AAED,SAAe,YAAY,CAAC,MAAc,EAAE,UAAkB;;;;;;;oBAGpD,OAAO,GAAG,aAAE,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;oBAEpB,qBAAM,aAAE;6BAC7B,UAAU,CAAC,OAAO,CAAC;6BACnB,KAAK,CAAC,QAAQ,EAAE,IAAI,EAAE,MAAM,CAAC;6BAC7B,GAAG,EAAE,EAAA;;oBAHA,aAAa,GAAG,SAGhB;oBACN,IAAI,aAAa,CAAC,KAAK,EAAE;wBACvB,MAAM,IAAA,qBAAS,EAAC,GAAG,EAAE,eAAe,CAAC,CAAC;qBACvC;oBAEG,QAAQ,GAAI,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;oBAGvC,SAAS,GAAG,IAAA,eAAM,GAAE,CAAC;oBACrB,UAAU,GAAG;wBACjB,SAAS,EAAE,SAAS;wBACpB,UAAU,EAAE,UAAU;wBACtB,IAAI,EAAE;4BACJ,QAAQ,EAAE,MAAM;4BAChB,aAAa,EAAE,QAAQ,CAAC,WAAW;yBACpC;qBACF,CAAA;oBACD,qBAAM,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,EAAA;;oBAA5C,SAA4C,CAAC;oBAC7C,sBAAO,EAAE,SAAS,EAAE,SAAS,EAAE,EAAC;;;oBAGhC,MAAM,IAAI,KAAK,CAAC,OAAK,CAAC,OAAO,CAAC,CAAC;;;;;CAElC;AAyDqD,oCAAY;AAvDlE,SAAe,WAAW,CAAC,MAAc,EAAE,SAAiB;;;;;wBAG7B,qBAAM,aAAE;yBAClC,UAAU,CAAC,UAAU,CAAC;yBACtB,KAAK,CAAC,WAAW,EAAE,IAAI,EAAE,SAAS,CAAC;yBACnC,GAAG,EAAE,EAAA;;oBAHF,oBAAoB,GAAG,SAGrB;oBACN,IAAI,oBAAoB,CAAC,KAAK,EAAE;wBAC9B,MAAM,IAAA,qBAAS,EAAC,GAAG,EAAE,gBAAgB,CAAC,CAAC;qBACxC;oBACK,WAAW,GAAG,oBAAoB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;oBACxD,OAAO,CAAC,GAAG,CAAC,gBAAgB,EAAE,WAAW,CAAC,CAAC;oBAGnB,qBAAM,aAAE;6BAC/B,UAAU,CAAC,OAAO,CAAC;6BACnB,KAAK,CAAC,QAAQ,EAAE,IAAI,EAAE,MAAM,CAAC;6BAC7B,GAAG,EAAE,EAAA;;oBAHF,iBAAiB,GAAG,SAGlB;oBACN,IAAI,iBAAiB,CAAC,KAAK,EAAE;wBAC3B,MAAM,IAAA,qBAAS,EAAC,GAAG,EAAE,eAAe,CAAC,CAAC;qBACvC;oBAEG,QAAQ,GAAG,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;oBAClD,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;oBAEhC,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,QAAQ,CAAC,WAAW,EAAE,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;oBACzE,IAAI,QAAQ,CAAC,WAAW,KAAK,WAAW,CAAC,IAAI,CAAC,WAAW,EAAE;wBACzD,MAAM,IAAA,qBAAS,EAAC,GAAG,EAAE,8BAA8B,CAAC,CAAC;qBACtD;oBAEK,OAAO,GAAG,IAAI,MAAM,CAAC,OAAO,EAAE,CAAC;oBAC/B,GAAG,GAAG,OAAO,CAAC,WAAW,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;oBACxD,sBAAO,GAAG,EAAC;;;;CACZ;AAsBO,kCAAW;AApBnB,SAAe,gBAAgB,CAAC,MAAc,EAAE,SAAiB,EAAE,OAAe;;;YAChF,MAAM;YACN,kEAAkE;YAClE,oDAAoD;YACpD,iCAAiC;YAGjC,6BAA6B;YAC7B,sBAAO,EAAC,QAAQ,EAAE,2BAA2B,EAAC,EAAC;;;CAChD;AAWmC,4CAAgB;AATpD,SAAe,aAAa,CAAC,MAAc,EAAE,SAAiB;;;YAC5D,OAAO;YACP,kCAAkC;YAClC,oDAAoD;YACpD,iCAAiC;YAEjC,sBAAO,EAAE,EAAC;;;CACX;AAEoB,sCAAa","sourcesContent":["import { nanoid } from \"nanoid\";\nimport { updateSourceFileNode } from \"typescript\";\nimport { db } from \"../config/firebase\";\nimport { getData, setData } from \"../db\";\nimport jwt from \"jsonwebtoken\";\nimport HTTPError from \"http-errors\";\nconst parseString = require('xml2js').parseString;\n\nconst xml2js = require('xml2js');\n\nasync function authenticateFromDB(token: string) {\n  // connect to db\n  const data = await db.collection(\"users\").get();\n\n  try {\n    console.log(\"HELLOOOO\");\n    const decodedToken = jwt.verify(token, \"cheesecake\") as jwt.JwtPayload;\n    // iterate over users\n    // if (!user) {\n    //   throw HTTPError(400, \"Invalid token.\");\n    // }\n\n    // return a user id\n    return decodedToken.userId;\n  } catch {\n    throw HTTPError(403, \"Invalid token.\");\n  }\n}\n\nasync function storeInvoice(userId: string, invoiceXML: string) {\n\n  try {\n    const invoice = db.collection(\"invoices\");\n\n    const querySnapshot = await db\n    .collection(\"users\")\n    .where(\"userId\", \"==\", userId)\n    .get();\n    if (querySnapshot.empty) {\n      throw HTTPError(400, \"Invalid user.\");\n    }\n \n  const userData =  querySnapshot.docs[0].data();\n    \n    // not secure but helpful for early testing\n    const invoiceId = nanoid();\n    const newInvoice = {\n      invoiceId: invoiceId,\n      invoiceXML: invoiceXML,\n      user: {\n        \"userId\": userId,\n        \"companyName\": userData.companyName\n      }\n    }\n    await invoice.doc(invoiceId).set(newInvoice);\n    return { invoiceId: invoiceId };\n    \n  } catch (error) {\n    throw new Error(error.message);\n  }\n}\n\nasync function showInvoice(userId: string, invoiceId: string) {\n\n\n  const invoicequerySnapshot = await db\n    .collection(\"invoices\")\n    .where(\"invoiceId\", \"==\", invoiceId)\n    .get();\n    if (invoicequerySnapshot.empty) {\n      throw HTTPError(400, \"Invoice empty.\");\n    }\n    const invoiceData = invoicequerySnapshot.docs[0].data();\n    console.log(\"skdjldlshbdjhd\", invoiceData);\n\n\n  const userquerySnapshot = await db\n    .collection(\"users\")\n    .where(\"userId\", \"==\", userId)\n    .get();\n    if (userquerySnapshot.empty) {\n      throw HTTPError(400, \"Invalid user.\");\n    }\n  \n  const userData = userquerySnapshot.docs[0].data();\n  console.log(\"sjkjdl\", userData);\n\n  console.log(\"check\", userData.companyName, invoiceData.user.companyName);\n  if (userData.companyName !== invoiceData.user.companyName) {\n    throw HTTPError(400, \"user cannot see this invoice\");\n  }\n\n  const builder = new xml2js.Builder();\n  const xml = builder.buildObject(invoiceData.invoiceXML);\n  return xml;\n}\n\nasync function showRangeInvoice(userId: string, startDate: number, endDate: number) {\n  //toDo\n  // takes in start date and end date, returns invoices within range\n  // checks token/userId belongs to a person from the \n  // company that added the invoice\n  \n\n  // invoices : [type invoice ]\n  return {invoices: \"ThiswillBeArrayOfInvoices\"};\n}\n\nasync function deleteInvoice(userId: string, invoiceId: string) {\n  // toDo\n  // deletes invoice given invoiceId\n  // checks token/userId belongs to a person from the \n  // company that added the invoice\n  \n  return {};\n}\n\nexport {showInvoice, deleteInvoice, showRangeInvoice, storeInvoice};"]}