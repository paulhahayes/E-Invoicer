{"version":3,"file":"/Users/yusramahomed/Desktop/SENG2021/se2021-23t1-einvoicing-api-h10a_CHEESECAKE-storage-api/src/server.ts","sources":["/Users/yusramahomed/Desktop/SENG2021/se2021-23t1-einvoicing-api-h10a_CHEESECAKE-storage-api/src/server.ts"],"names":[],"mappings":";;;;;AAAA,oDAAqD;AACrD,kFAAkD;AAClD,kDAA4B;AAC5B,8DAAmC;AACnC,+BAA8B;AAC9B,2BAA+B;AAC/B,0CAAoB;AAEpB,SAAS;AACT,yEAAmD;AACnD,mEAA6C;AAC7C,mEAA6C;AAC7C,SAAS;AACT,0EAA2C;AAC3C,gEAAyC;AACzC,mDAA2C;AAO3C,IAAM,GAAG,GAAG,IAAA,iBAAO,GAAE,CAAC;AACtB,yBAAyB;AACzB,gGAAgG;AAEhG,4BAA4B;AAC5B,0BAA0B;AAE1B,qCAAqC;AACrC,8BAA8B;AAC9B,sDAAsD;AACtD,GAAG,CAAC,GAAG,CAAC,iBAAO,CAAC,IAAI,EAAE,CAAC,CAAC;AACxB,GAAG,CAAC,GAAG,CAAC,iBAAO,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,iBAAiB,EAAE,CAAC,CAAC,CAAC;AACnD,IAAM,IAAI,GAAG,qBAAM,CAAC,IAAI,CAAC;AACzB,IAAM,GAAG,GAAG,qBAAM,CAAC,GAAG,CAAC;AAEvB,IAAM,UAAU,GAAG,YAAE,CAAC,YAAY,CAAC,eAAe,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC;AACnE,IAAA,YAAO,EAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;AAExC,WAAW;AACX,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,UAAC,GAAY,EAAE,GAAa;IACvC,OAAO,CAAC,GAAG,CAAC,gCAAgC,CAAC,CAAC;IAC9C,GAAG,CAAC,IAAI,CAAC;QACP,OAAO,EAAE,0CAA0C;KACpD,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,oBAAoB;AACpB,GAAG,CAAC,GAAG,CAAC,OAAO,EAAE,UAAC,GAAY,EAAE,GAAa;IAC3C,IAAM,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,KAAe,CAAC;IACxC,OAAO,GAAG,CAAC,IAAI,CAAC,IAAA,WAAI,EAAC,KAAK,CAAC,CAAC,CAAC;AAC/B,CAAC,CAAC,CAAC;AAEH,wBAAwB;AACxB,GAAG,CAAC,GAAG,CAAC,IAAA,gCAAY,GAAE,CAAC,CAAC;AAExB,qBAAqB;AACrB,GAAG,CAAC,GAAG,CAAC,IAAA,gBAAM,EAAC,KAAK,CAAC,CAAC,CAAC;AAEvB,UAAU;AACV,IAAM,IAAI,GAAG,IAAA,uBAAY,EAAC,wBAAO,CAAC,CAAC;AAEnC,SAAS;AACT,GAAG,CAAC,GAAG,CAAC,uBAAa,CAAC,CAAC;AACvB,GAAG,CAAC,GAAG,CAAC,oBAAU,CAAC,CAAC;AACpB,GAAG,CAAC,GAAG,CAAC,oBAAU,CAAC,CAAC;AACpB,GAAG,CAAC,GAAG,CAAC,OAAO,EAAE,4BAAS,CAAC,KAAK,EAAE,4BAAS,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;AAEzD,eAAe;AACf,IAAM,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE;IAC9B,OAAO,CAAC,GAAG,CAAC,8CAAuC,GAAG,cAAI,IAAI,CAAE,CAAC,CAAC;AACpE,CAAC,CAAC,CAAC;AAEH,yCAAyC;AACzC,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE;IACnB,MAAM,CAAC,KAAK,CAAC,cAAM,OAAA,OAAO,CAAC,GAAG,CAAC,kCAAkC,CAAC,EAA/C,CAA+C,CAAC,CAAC;AACtE,CAAC,CAAC,CAAC","sourcesContent":["import express, { Request, Response } from \"express\";\nimport errorHandler from \"middleware-http-errors\";\nimport morgan from \"morgan\";\nimport config from \"./config.json\";\nimport { echo } from \"./echo\";\nimport { setData } from \"./db\";\nimport fs from \"fs\";\n\n// routes\nimport invoiceRoutes from \"./routes/invoiceRoutes\";\nimport userRoutes from \"./routes/userRoutes\";\nimport authRoutes from \"./routes/authRoutes\";\n//Swagger\nimport swaggerUI from \"swagger-ui-express\";\nimport swaggerJSDoc from \"swagger-jsdoc\";\nimport { options } from \"./swaggerOptions\";\n\n// xml \nimport bodyParser from 'body-parser';\nimport xmlparser from 'express-xml-bodyparser';\n\n\nconst app = express();\n// disable XML validation\n// const xmlMiddleware = xmlparser({ normalizeTags: false, normalize: false, validate: false });\n\n// // use the XML middleware\n// app.use(xmlMiddleware);\n\n// // parse JSON and URL-encoded data\n// app.use(bodyParser.json());\n// app.use(bodyParser.urlencoded({ extended: true }));\napp.use(express.json());\napp.use(express.text({ type: 'application/xml' }));\nconst PORT = config.port;\nconst URL = config.url;\n\nconst storedData = fs.readFileSync(\"src/data.json\", { flag: \"r\" });\nsetData(JSON.parse(String(storedData)));\n\n// Root URL\napp.get(\"/\", (req: Request, res: Response) => {\n  console.log(\"someone accessed our root url!\");\n  res.json({\n    message: \"Welcome to CHEESECAKE Server's root URL!\",\n  });\n});\n\n// simple echo route\napp.get(\"/echo\", (req: Request, res: Response) => {\n  const value = req.query.value as string;\n  return res.json(echo(value));\n});\n\n// handles errors nicely\napp.use(errorHandler());\n\n// for logging errors\napp.use(morgan(\"dev\"));\n\n// swagger\nconst spec = swaggerJSDoc(options);\n\n// routes\napp.use(invoiceRoutes);\napp.use(userRoutes);\napp.use(authRoutes);\napp.use(\"/docs\", swaggerUI.serve, swaggerUI.setup(spec));\n\n// start server\nconst server = app.listen(PORT, () => {\n  console.log(`Starting Express Server at the URL: ${URL}:${PORT}`);\n});\n\n// For coverage, handle Ctrl+C gracefully\nprocess.on(\"SIGINT\", () => {\n  server.close(() => console.log(\"Shutting down server gracefully.\"));\n});\n"]}