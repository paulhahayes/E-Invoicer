{"version":3,"file":"/Users/yusramahomed/Desktop/SENG2021/se2021-23t1-einvoicing-api-h10a_CHEESECAKE-storage-api/src/functions/auth.ts","sources":["/Users/yusramahomed/Desktop/SENG2021/se2021-23t1-einvoicing-api-h10a_CHEESECAKE-storage-api/src/functions/auth.ts"],"names":[],"mappings":"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","sourcesContent":["import { getData, setData } from \"../db\";\nimport { db } from \"../config/firebase\";\n\nimport {\n  queryLoginValid,\n  queryUserByEmail,\n  queryUserCount,\n} from \"../service/UserTable\";\nimport {\n  queryUserByCompanyKey,\n  queryCompanyExists,\n  queryCompanyCount,\n} from \"../service/CompanyTable\";\nimport * as EmailValidator from \"email-validator\";\nimport HTTPError from \"http-errors\";\nimport bcrypt from \"bcrypt\";\nimport jwt from \"jsonwebtoken\";\nimport { updateSetAccessor } from \"typescript\";\nimport { nanoid } from \"nanoid\";\nimport { exit } from \"process\";\n\nasync function authenticateFromDB(token: string) {\n  // connect to db\n  const data = await db.collection(\"users\").get();\n\n  try {\n    console.log(\"HELLOOOO\");\n    const decodedToken = jwt.verify(token, \"cheesecake\") as jwt.JwtPayload;\n    // iterate over users\n    // if (!user) {\n    //   throw HTTPError(400, \"Invalid token.\");\n    // }\n\n    // return a user id\n    return decodedToken.userId;\n  } catch {\n    throw HTTPError(403, \"Invalid token.\");\n  }\n}\n\nasync function authRegisterCompany(\n  companyName: string,\n  companyEmail: string,\n  numEmployees: number,\n  ABN: number\n) {\n  // invalid email\n  if (!EmailValidator.validate(companyEmail)) {\n    throw HTTPError(400, \"Email is invalid.\");\n  }\n\n  // // invalid ABN\n  // if (!isValidABN(ABN)) {\n  //   throw HTTPError(400, 'ABN is invalid.');\n  // }\n\n  // check if company already exists\n  const exists = await queryCompanyExists(companyName);\n  if (exists) {\n    throw HTTPError(400, \"Company already registered.\");\n  }\n\n  try {\n    const company = db.collection(\"companies\");\n\n    // not secure but helpful for early testing\n    const companyKey = await queryCompanyCount();\n\n    const newCompany = {\n      companyName: companyName,\n      companyEmail: companyEmail,\n      companyKey: companyKey,\n      numEmployees: numEmployees,\n      ABN: ABN,\n    };\n\n    await company.doc(companyName).set(newCompany);\n    return { companyKey: companyKey };\n  } catch (error) {\n    throw new Error(error.message);\n  }\n}\n\nasync function authRegister(\n  email: string,\n  password: string,\n  name: string,\n  companyKey: string\n) {\n  // invalid email\n  if (!EmailValidator.validate(email)) {\n    throw HTTPError(400, \"Email is invalid.\");\n  }\n\n  //  check if email already exists\n  const emailAlreadyExists = await queryUserByEmail(email);\n  if (emailAlreadyExists) {\n    throw HTTPError(400, \"Email already registered.\");\n  }\n\n  // invalid companyKey\n  const companyKeyExists = await queryUserByCompanyKey(companyKey);\n  if (!companyKeyExists) {\n    throw HTTPError(400, \"Invalid company key.\");\n  }\n\n  try {\n    //TODO tokenize password\n\n    const user = db.collection(\"users\");\n\n    const userId = nanoid();\n\n    // password encryption\n    const saltRounds = 10;\n    const salt = bcrypt.genSaltSync(saltRounds);\n    const hash = bcrypt.hashSync(password, salt);\n\n    // tokens\n    const token = jwt.sign({ userId: userId }, \"cheesecake\", {\n      expiresIn: \"1d\",\n    });\n\n    //find compnayName based in company key \n    const querySnapshot = await db\n    .collection(\"companies\")\n    .where(\"companyKey\", \"==\", companyKey)\n    .get();\n    if (querySnapshot.empty) {\n      throw HTTPError(400, \"company name doesnt exist or sth\");\n    }\n\n    const companyData = querySnapshot.docs[0].data();\n\n    const userObject = {\n      userId,\n      email,\n      hash,\n      name,\n      \"companyName\": companyData.companyName,\n      tokens: [token],\n    };\n\n    // set in database\n    await user.doc(userId).set(userObject);\n\n    return {\n      token: token,\n      userId: userId,\n    };\n  } catch (error) {\n    throw new Error(error.message);\n  }\n}\n\nasync function authLogin(email: string, password: string) {\n  // Check email and password are valid\n  if (!queryLoginValid) {\n    throw HTTPError(400, \"Invalid email or password.\");\n  }\n\n  const querySnapshot = await db\n    .collection(\"users\")\n    .where(\"email\", \"==\", email)\n    .get();\n  if (querySnapshot.empty) {\n    throw HTTPError(401, \"Invalid user.\");\n  }\n  //console.log(\"ugh\", querySnapshot);\n  const userData = querySnapshot.docs[0].data();\n  //console.log(\"pls\", userData);\n  const token = jwt.sign({ userId: userData.userId }, \"cheesecake\", {\n    expiresIn: \"1d\",\n  });\n\n  // Append new token to the existing token array\n  userData.tokens.push(token);\n\n  // Update user document in Firebase\n  await db.collection(\"users\").doc(userData.userId).update({\n    tokens: userData.tokens,\n  });\n\n  \n\n  return {\n    token: token,\n    userId: userData.userId,\n  };\n}\n\nasync function authLogout(token: string) {\n  const userId = await authenticateFromDB(token);\n  // find user in db\n  const userRef = db.collection(\"users\").doc(userId);\n  const userDoc = await userRef.get();\n\n  // remove token from user object for that particular user\n  const updatedTokens = userDoc.data().tokens.filter((t) => t !== token);\n\n  // update user object in db\n  await userRef.update({ tokens: updatedTokens });\n\n  return {};\n}\n\nexport { authRegister, authLogin, authLogout, authRegisterCompany };\n"]}