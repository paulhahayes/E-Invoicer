"use strict";function cov_irfh9p2xd(){var path="/Users/yusramahomed/Desktop/SENG2021/se2021-23t1-einvoicing-api-h10a_CHEESECAKE-storage-api/src/routes/userRoutes.ts";var hash="1e467e5a5d2c1e5f3954ed2478e7d8257fda10ac";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/yusramahomed/Desktop/SENG2021/se2021-23t1-einvoicing-api-h10a_CHEESECAKE-storage-api/src/routes/userRoutes.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:16},end:{line:3,column:34}},"2":{start:{line:4,column:23},end:{line:4,column:63}},"3":{start:{line:5,column:13},end:{line:5,column:36}},"4":{start:{line:72,column:0},end:{line:72,column:48}},"5":{start:{line:98,column:0},end:{line:98,column:51}},"6":{start:{line:99,column:0},end:{line:99,column:25}}},fnMap:{},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},f:{},b:{},inputSourceMap:{version:3,file:"/Users/yusramahomed/Desktop/SENG2021/se2021-23t1-einvoicing-api-h10a_CHEESECAKE-storage-api/src/routes/userRoutes.ts",sources:["/Users/yusramahomed/Desktop/SENG2021/se2021-23t1-einvoicing-api-h10a_CHEESECAKE-storage-api/src/routes/userRoutes.ts"],names:[],mappings:";;AAAA,mCAAiC;AACjC,gEAAkE;AAElE,IAAM,MAAM,GAAG,IAAA,gBAAM,GAAE,CAAC;AACxB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAmCG;AAEH;;;;;;;;;;GAUG;AAEH;;;;;;;;;;;;;;;;;;GAkBG;AACH,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,yBAAQ,CAAC,CAAC;AAE/B;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AACH,MAAM,CAAC,GAAG,CAAC,YAAY,EAAE,wBAAO,CAAC,CAAC;AAElC,kBAAe,MAAM,CAAC",sourcesContent:["import { Router } from \"express\";\nimport { getUsers, getUser } from \"../controllers/userController\";\n\nconst router = Router();\n/**\n * @swagger\n * components:\n *  schemas:\n *    User:\n *      type: object\n *      properties:\n *        email:\n *          type: string\n *          pattern: '^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$'\n *          description: User's account email\n *        password:\n *          type: string\n *          minLength: 6\n *          description: An encrypted password used for logging in\n *        id:\n *          type: string\n *          description: An auto-generated ID of the user\n *        name:\n *          type: string\n *          description: The user's name\n *        companyKey:\n *          type: string\n *          description: The user's company name\n *      required: [email, password, name]\n *      example:\n *        email: z0000000@ad.unsw.edu.au\n *        password: password123\n *        name: John Smith\n *        companyKey: UNSW\n *        id: abc123def456\n *    Invoice:\n *      type: object\n *\n *\n */\n\n/**\n * @swagger\n * tags:\n *  - name: Users\n *    description: User endpoints\n *  - name: Invoices\n *    description: Invoice endpoints\n *  - name: Authentication\n *    description: Authentication endpoints\n *\n */\n\n/**\n * @swagger\n * /users:\n *  get:\n *   summary: Get list of users\n *   tags: [Users]\n *   responses:\n *    200:\n *      description: The list of users\n *      content:\n *        application/json:\n *          schema:\n *            type: array\n *            items:\n *              $ref: '#/components/schemas/User'\n *    500:\n *      description: Internal server error\n *\n */\nrouter.get(\"/users\", getUsers);\n\n/**\n * @swagger\n * /users/{id}:\n *   get:\n *     summary: Get a user by ID\n *     tags: [Users]\n *     parameters:\n *       - in: path\n *         name: id\n *         required: true\n *         description: The ID of the user to retrieve\n *         schema:\n *           type: string\n *     responses:\n *       '200':\n *         description: The user with the given ID\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/User'\n *       '404':\n *         description: User not found\n *       '500':\n *         description: Internal server error\n */\nrouter.get(\"/users/:id\", getUser);\n\nexport default router;\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"1e467e5a5d2c1e5f3954ed2478e7d8257fda10ac"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_irfh9p2xd=function(){return actualCoverage;};}return actualCoverage;}cov_irfh9p2xd();cov_irfh9p2xd().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});var express_1=(cov_irfh9p2xd().s[1]++,require("express"));var userController_1=(cov_irfh9p2xd().s[2]++,require("../controllers/userController"));var router=(cov_irfh9p2xd().s[3]++,(0,express_1.Router)());/**
 * @swagger
 * components:
 *  schemas:
 *    User:
 *      type: object
 *      properties:
 *        email:
 *          type: string
 *          pattern: '^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$'
 *          description: User's account email
 *        password:
 *          type: string
 *          minLength: 6
 *          description: An encrypted password used for logging in
 *        id:
 *          type: string
 *          description: An auto-generated ID of the user
 *        name:
 *          type: string
 *          description: The user's name
 *        companyKey:
 *          type: string
 *          description: The user's company name
 *      required: [email, password, name]
 *      example:
 *        email: z0000000@ad.unsw.edu.au
 *        password: password123
 *        name: John Smith
 *        companyKey: UNSW
 *        id: abc123def456
 *    Invoice:
 *      type: object
 *
 *
 */ /**
 * @swagger
 * tags:
 *  - name: Users
 *    description: User endpoints
 *  - name: Invoices
 *    description: Invoice endpoints
 *  - name: Authentication
 *    description: Authentication endpoints
 *
 */ /**
 * @swagger
 * /users:
 *  get:
 *   summary: Get list of users
 *   tags: [Users]
 *   responses:
 *    200:
 *      description: The list of users
 *      content:
 *        application/json:
 *          schema:
 *            type: array
 *            items:
 *              $ref: '#/components/schemas/User'
 *    500:
 *      description: Internal server error
 *
 */cov_irfh9p2xd().s[4]++;router.get("/users",userController_1.getUsers);/**
 * @swagger
 * /users/{id}:
 *   get:
 *     summary: Get a user by ID
 *     tags: [Users]
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         description: The ID of the user to retrieve
 *         schema:
 *           type: string
 *     responses:
 *       '200':
 *         description: The user with the given ID
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/User'
 *       '404':
 *         description: User not found
 *       '500':
 *         description: Internal server error
 */cov_irfh9p2xd().s[5]++;router.get("/users/:id",userController_1.getUser);cov_irfh9p2xd().s[6]++;exports.default=router;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL3l1c3JhbWFob21lZC9EZXNrdG9wL1NFTkcyMDIxL3NlMjAyMS0yM3QxLWVpbnZvaWNpbmctYXBpLWgxMGFfQ0hFRVNFQ0FLRS1zdG9yYWdlLWFwaS9zcmMvcm91dGVzL3VzZXJSb3V0ZXMudHMiLCJzb3VyY2VzIjpbIi9Vc2Vycy95dXNyYW1haG9tZWQvRGVza3RvcC9TRU5HMjAyMS9zZTIwMjEtMjN0MS1laW52b2ljaW5nLWFwaS1oMTBhX0NIRUVTRUNBS0Utc3RvcmFnZS1hcGkvc3JjL3JvdXRlcy91c2VyUm91dGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsbUNBQWlDO0FBQ2pDLGdFQUFrRTtBQUVsRSxJQUFNLE1BQU0sR0FBRyxJQUFBLGdCQUFNLEdBQUUsQ0FBQztBQUN4Qjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FtQ0c7QUFFSDs7Ozs7Ozs7OztHQVVHO0FBRUg7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQWtCRztBQUNILE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLHlCQUFRLENBQUMsQ0FBQztBQUUvQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBd0JHO0FBQ0gsTUFBTSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsd0JBQU8sQ0FBQyxDQUFDO0FBRWxDLGtCQUFlLE1BQU0sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJvdXRlciB9IGZyb20gXCJleHByZXNzXCI7XG5pbXBvcnQgeyBnZXRVc2VycywgZ2V0VXNlciB9IGZyb20gXCIuLi9jb250cm9sbGVycy91c2VyQ29udHJvbGxlclwiO1xuXG5jb25zdCByb3V0ZXIgPSBSb3V0ZXIoKTtcbi8qKlxuICogQHN3YWdnZXJcbiAqIGNvbXBvbmVudHM6XG4gKiAgc2NoZW1hczpcbiAqICAgIFVzZXI6XG4gKiAgICAgIHR5cGU6IG9iamVjdFxuICogICAgICBwcm9wZXJ0aWVzOlxuICogICAgICAgIGVtYWlsOlxuICogICAgICAgICAgdHlwZTogc3RyaW5nXG4gKiAgICAgICAgICBwYXR0ZXJuOiAnXlxcdysoW1xcLi1dP1xcdyspKkBcXHcrKFtcXC4tXT9cXHcrKSooXFwuXFx3ezIsM30pKyQnXG4gKiAgICAgICAgICBkZXNjcmlwdGlvbjogVXNlcidzIGFjY291bnQgZW1haWxcbiAqICAgICAgICBwYXNzd29yZDpcbiAqICAgICAgICAgIHR5cGU6IHN0cmluZ1xuICogICAgICAgICAgbWluTGVuZ3RoOiA2XG4gKiAgICAgICAgICBkZXNjcmlwdGlvbjogQW4gZW5jcnlwdGVkIHBhc3N3b3JkIHVzZWQgZm9yIGxvZ2dpbmcgaW5cbiAqICAgICAgICBpZDpcbiAqICAgICAgICAgIHR5cGU6IHN0cmluZ1xuICogICAgICAgICAgZGVzY3JpcHRpb246IEFuIGF1dG8tZ2VuZXJhdGVkIElEIG9mIHRoZSB1c2VyXG4gKiAgICAgICAgbmFtZTpcbiAqICAgICAgICAgIHR5cGU6IHN0cmluZ1xuICogICAgICAgICAgZGVzY3JpcHRpb246IFRoZSB1c2VyJ3MgbmFtZVxuICogICAgICAgIGNvbXBhbnlLZXk6XG4gKiAgICAgICAgICB0eXBlOiBzdHJpbmdcbiAqICAgICAgICAgIGRlc2NyaXB0aW9uOiBUaGUgdXNlcidzIGNvbXBhbnkgbmFtZVxuICogICAgICByZXF1aXJlZDogW2VtYWlsLCBwYXNzd29yZCwgbmFtZV1cbiAqICAgICAgZXhhbXBsZTpcbiAqICAgICAgICBlbWFpbDogejAwMDAwMDBAYWQudW5zdy5lZHUuYXVcbiAqICAgICAgICBwYXNzd29yZDogcGFzc3dvcmQxMjNcbiAqICAgICAgICBuYW1lOiBKb2huIFNtaXRoXG4gKiAgICAgICAgY29tcGFueUtleTogVU5TV1xuICogICAgICAgIGlkOiBhYmMxMjNkZWY0NTZcbiAqICAgIEludm9pY2U6XG4gKiAgICAgIHR5cGU6IG9iamVjdFxuICpcbiAqXG4gKi9cblxuLyoqXG4gKiBAc3dhZ2dlclxuICogdGFnczpcbiAqICAtIG5hbWU6IFVzZXJzXG4gKiAgICBkZXNjcmlwdGlvbjogVXNlciBlbmRwb2ludHNcbiAqICAtIG5hbWU6IEludm9pY2VzXG4gKiAgICBkZXNjcmlwdGlvbjogSW52b2ljZSBlbmRwb2ludHNcbiAqICAtIG5hbWU6IEF1dGhlbnRpY2F0aW9uXG4gKiAgICBkZXNjcmlwdGlvbjogQXV0aGVudGljYXRpb24gZW5kcG9pbnRzXG4gKlxuICovXG5cbi8qKlxuICogQHN3YWdnZXJcbiAqIC91c2VyczpcbiAqICBnZXQ6XG4gKiAgIHN1bW1hcnk6IEdldCBsaXN0IG9mIHVzZXJzXG4gKiAgIHRhZ3M6IFtVc2Vyc11cbiAqICAgcmVzcG9uc2VzOlxuICogICAgMjAwOlxuICogICAgICBkZXNjcmlwdGlvbjogVGhlIGxpc3Qgb2YgdXNlcnNcbiAqICAgICAgY29udGVudDpcbiAqICAgICAgICBhcHBsaWNhdGlvbi9qc29uOlxuICogICAgICAgICAgc2NoZW1hOlxuICogICAgICAgICAgICB0eXBlOiBhcnJheVxuICogICAgICAgICAgICBpdGVtczpcbiAqICAgICAgICAgICAgICAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvVXNlcidcbiAqICAgIDUwMDpcbiAqICAgICAgZGVzY3JpcHRpb246IEludGVybmFsIHNlcnZlciBlcnJvclxuICpcbiAqL1xucm91dGVyLmdldChcIi91c2Vyc1wiLCBnZXRVc2Vycyk7XG5cbi8qKlxuICogQHN3YWdnZXJcbiAqIC91c2Vycy97aWR9OlxuICogICBnZXQ6XG4gKiAgICAgc3VtbWFyeTogR2V0IGEgdXNlciBieSBJRFxuICogICAgIHRhZ3M6IFtVc2Vyc11cbiAqICAgICBwYXJhbWV0ZXJzOlxuICogICAgICAgLSBpbjogcGF0aFxuICogICAgICAgICBuYW1lOiBpZFxuICogICAgICAgICByZXF1aXJlZDogdHJ1ZVxuICogICAgICAgICBkZXNjcmlwdGlvbjogVGhlIElEIG9mIHRoZSB1c2VyIHRvIHJldHJpZXZlXG4gKiAgICAgICAgIHNjaGVtYTpcbiAqICAgICAgICAgICB0eXBlOiBzdHJpbmdcbiAqICAgICByZXNwb25zZXM6XG4gKiAgICAgICAnMjAwJzpcbiAqICAgICAgICAgZGVzY3JpcHRpb246IFRoZSB1c2VyIHdpdGggdGhlIGdpdmVuIElEXG4gKiAgICAgICAgIGNvbnRlbnQ6XG4gKiAgICAgICAgICAgYXBwbGljYXRpb24vanNvbjpcbiAqICAgICAgICAgICAgIHNjaGVtYTpcbiAqICAgICAgICAgICAgICAgJHJlZjogJyMvY29tcG9uZW50cy9zY2hlbWFzL1VzZXInXG4gKiAgICAgICAnNDA0JzpcbiAqICAgICAgICAgZGVzY3JpcHRpb246IFVzZXIgbm90IGZvdW5kXG4gKiAgICAgICAnNTAwJzpcbiAqICAgICAgICAgZGVzY3JpcHRpb246IEludGVybmFsIHNlcnZlciBlcnJvclxuICovXG5yb3V0ZXIuZ2V0KFwiL3VzZXJzLzppZFwiLCBnZXRVc2VyKTtcblxuZXhwb3J0IGRlZmF1bHQgcm91dGVyO1xuIl19
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleHByZXNzXzEiLCJjb3ZfaXJmaDlwMnhkIiwicyIsInJlcXVpcmUiLCJ1c2VyQ29udHJvbGxlcl8xIiwicm91dGVyIiwiUm91dGVyIiwiZ2V0IiwiZ2V0VXNlcnMiLCJnZXRVc2VyIiwiZXhwb3J0cyIsImRlZmF1bHQiXSwic291cmNlcyI6WyIvVXNlcnMveXVzcmFtYWhvbWVkL0Rlc2t0b3AvU0VORzIwMjEvc2UyMDIxLTIzdDEtZWludm9pY2luZy1hcGktaDEwYV9DSEVFU0VDQUtFLXN0b3JhZ2UtYXBpL3NyYy9yb3V0ZXMvdXNlclJvdXRlcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSb3V0ZXIgfSBmcm9tIFwiZXhwcmVzc1wiO1xuaW1wb3J0IHsgZ2V0VXNlcnMsIGdldFVzZXIgfSBmcm9tIFwiLi4vY29udHJvbGxlcnMvdXNlckNvbnRyb2xsZXJcIjtcblxuY29uc3Qgcm91dGVyID0gUm91dGVyKCk7XG4vKipcbiAqIEBzd2FnZ2VyXG4gKiBjb21wb25lbnRzOlxuICogIHNjaGVtYXM6XG4gKiAgICBVc2VyOlxuICogICAgICB0eXBlOiBvYmplY3RcbiAqICAgICAgcHJvcGVydGllczpcbiAqICAgICAgICBlbWFpbDpcbiAqICAgICAgICAgIHR5cGU6IHN0cmluZ1xuICogICAgICAgICAgcGF0dGVybjogJ15cXHcrKFtcXC4tXT9cXHcrKSpAXFx3KyhbXFwuLV0/XFx3KykqKFxcLlxcd3syLDN9KSskJ1xuICogICAgICAgICAgZGVzY3JpcHRpb246IFVzZXIncyBhY2NvdW50IGVtYWlsXG4gKiAgICAgICAgcGFzc3dvcmQ6XG4gKiAgICAgICAgICB0eXBlOiBzdHJpbmdcbiAqICAgICAgICAgIG1pbkxlbmd0aDogNlxuICogICAgICAgICAgZGVzY3JpcHRpb246IEFuIGVuY3J5cHRlZCBwYXNzd29yZCB1c2VkIGZvciBsb2dnaW5nIGluXG4gKiAgICAgICAgaWQ6XG4gKiAgICAgICAgICB0eXBlOiBzdHJpbmdcbiAqICAgICAgICAgIGRlc2NyaXB0aW9uOiBBbiBhdXRvLWdlbmVyYXRlZCBJRCBvZiB0aGUgdXNlclxuICogICAgICAgIG5hbWU6XG4gKiAgICAgICAgICB0eXBlOiBzdHJpbmdcbiAqICAgICAgICAgIGRlc2NyaXB0aW9uOiBUaGUgdXNlcidzIG5hbWVcbiAqICAgICAgICBjb21wYW55S2V5OlxuICogICAgICAgICAgdHlwZTogc3RyaW5nXG4gKiAgICAgICAgICBkZXNjcmlwdGlvbjogVGhlIHVzZXIncyBjb21wYW55IG5hbWVcbiAqICAgICAgcmVxdWlyZWQ6IFtlbWFpbCwgcGFzc3dvcmQsIG5hbWVdXG4gKiAgICAgIGV4YW1wbGU6XG4gKiAgICAgICAgZW1haWw6IHowMDAwMDAwQGFkLnVuc3cuZWR1LmF1XG4gKiAgICAgICAgcGFzc3dvcmQ6IHBhc3N3b3JkMTIzXG4gKiAgICAgICAgbmFtZTogSm9obiBTbWl0aFxuICogICAgICAgIGNvbXBhbnlLZXk6IFVOU1dcbiAqICAgICAgICBpZDogYWJjMTIzZGVmNDU2XG4gKiAgICBJbnZvaWNlOlxuICogICAgICB0eXBlOiBvYmplY3RcbiAqXG4gKlxuICovXG5cbi8qKlxuICogQHN3YWdnZXJcbiAqIHRhZ3M6XG4gKiAgLSBuYW1lOiBVc2Vyc1xuICogICAgZGVzY3JpcHRpb246IFVzZXIgZW5kcG9pbnRzXG4gKiAgLSBuYW1lOiBJbnZvaWNlc1xuICogICAgZGVzY3JpcHRpb246IEludm9pY2UgZW5kcG9pbnRzXG4gKiAgLSBuYW1lOiBBdXRoZW50aWNhdGlvblxuICogICAgZGVzY3JpcHRpb246IEF1dGhlbnRpY2F0aW9uIGVuZHBvaW50c1xuICpcbiAqL1xuXG4vKipcbiAqIEBzd2FnZ2VyXG4gKiAvdXNlcnM6XG4gKiAgZ2V0OlxuICogICBzdW1tYXJ5OiBHZXQgbGlzdCBvZiB1c2Vyc1xuICogICB0YWdzOiBbVXNlcnNdXG4gKiAgIHJlc3BvbnNlczpcbiAqICAgIDIwMDpcbiAqICAgICAgZGVzY3JpcHRpb246IFRoZSBsaXN0IG9mIHVzZXJzXG4gKiAgICAgIGNvbnRlbnQ6XG4gKiAgICAgICAgYXBwbGljYXRpb24vanNvbjpcbiAqICAgICAgICAgIHNjaGVtYTpcbiAqICAgICAgICAgICAgdHlwZTogYXJyYXlcbiAqICAgICAgICAgICAgaXRlbXM6XG4gKiAgICAgICAgICAgICAgJHJlZjogJyMvY29tcG9uZW50cy9zY2hlbWFzL1VzZXInXG4gKiAgICA1MDA6XG4gKiAgICAgIGRlc2NyaXB0aW9uOiBJbnRlcm5hbCBzZXJ2ZXIgZXJyb3JcbiAqXG4gKi9cbnJvdXRlci5nZXQoXCIvdXNlcnNcIiwgZ2V0VXNlcnMpO1xuXG4vKipcbiAqIEBzd2FnZ2VyXG4gKiAvdXNlcnMve2lkfTpcbiAqICAgZ2V0OlxuICogICAgIHN1bW1hcnk6IEdldCBhIHVzZXIgYnkgSURcbiAqICAgICB0YWdzOiBbVXNlcnNdXG4gKiAgICAgcGFyYW1ldGVyczpcbiAqICAgICAgIC0gaW46IHBhdGhcbiAqICAgICAgICAgbmFtZTogaWRcbiAqICAgICAgICAgcmVxdWlyZWQ6IHRydWVcbiAqICAgICAgICAgZGVzY3JpcHRpb246IFRoZSBJRCBvZiB0aGUgdXNlciB0byByZXRyaWV2ZVxuICogICAgICAgICBzY2hlbWE6XG4gKiAgICAgICAgICAgdHlwZTogc3RyaW5nXG4gKiAgICAgcmVzcG9uc2VzOlxuICogICAgICAgJzIwMCc6XG4gKiAgICAgICAgIGRlc2NyaXB0aW9uOiBUaGUgdXNlciB3aXRoIHRoZSBnaXZlbiBJRFxuICogICAgICAgICBjb250ZW50OlxuICogICAgICAgICAgIGFwcGxpY2F0aW9uL2pzb246XG4gKiAgICAgICAgICAgICBzY2hlbWE6XG4gKiAgICAgICAgICAgICAgICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9Vc2VyJ1xuICogICAgICAgJzQwNCc6XG4gKiAgICAgICAgIGRlc2NyaXB0aW9uOiBVc2VyIG5vdCBmb3VuZFxuICogICAgICAgJzUwMCc6XG4gKiAgICAgICAgIGRlc2NyaXB0aW9uOiBJbnRlcm5hbCBzZXJ2ZXIgZXJyb3JcbiAqL1xucm91dGVyLmdldChcIi91c2Vycy86aWRcIiwgZ2V0VXNlcik7XG5cbmV4cG9ydCBkZWZhdWx0IHJvdXRlcjtcbiJdLCJtYXBwaW5ncyI6Ijt5S0FBQSxJQUFBQSxTQUFBLEVBQUFDLGFBQUEsR0FBQUMsQ0FBQSxNQUFBQyxPQUFBLGFBQ0EsSUFBQUMsZ0JBQUEsRUFBQUgsYUFBQSxHQUFBQyxDQUFBLE1BQUFDLE9BQUEsbUNBRUEsR0FBTSxDQUFBRSxNQUFNLEVBQUFKLGFBQUEsR0FBQUMsQ0FBQSxNQUFHLEdBQUFGLFNBQUEsQ0FBQU0sTUFBTSxHQUFFLEVBQ3ZCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQUFBLENBcUNBOzs7Ozs7Ozs7O0dBQUEsQ0FZQTs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBQUFMLGFBQUEsR0FBQUMsQ0FBQSxNQW1CQUcsTUFBTSxDQUFDRSxHQUFHLENBQUMsUUFBUSxDQUFFSCxnQkFBQSxDQUFBSSxRQUFRLENBQUMsQ0FFOUI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQUFBUCxhQUFBLEdBQUFDLENBQUEsTUF5QkFHLE1BQU0sQ0FBQ0UsR0FBRyxDQUFDLFlBQVksQ0FBRUgsZ0JBQUEsQ0FBQUssT0FBTyxDQUFDLENBQUNSLGFBQUEsR0FBQUMsQ0FBQSxNQUVsQ1EsT0FBQSxDQUFBQyxPQUFBLENBQWVOLE1BQU0sQyJ9