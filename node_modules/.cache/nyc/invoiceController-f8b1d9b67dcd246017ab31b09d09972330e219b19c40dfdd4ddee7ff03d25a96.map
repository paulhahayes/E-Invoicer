{"version":3,"file":"/Users/yusramahomed/Desktop/seng2021--/se2021-23t1-einvoicing-api-h10a_CHEESECAKE-storage-api/src/controllers/invoiceController.ts","sources":["/Users/yusramahomed/Desktop/seng2021--/se2021-23t1-einvoicing-api-h10a_CHEESECAKE-storage-api/src/controllers/invoiceController.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,gDAAkG;AAClG,4DAAoC;AACpC,IAAM,WAAW,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC,WAAW,CAAC;AAE3C,IAAM,YAAY,GAAG,UAAO,GAAY,EAAE,GAAa;;;;;gBACtD,KAAK,GAAG,GAAG,CAAC,OAAO,CAAC,KAAe,CAAC;gBACpC,UAAU,GAAG,GAAG,CAAC,IAAI,CAAC;;;;gBAEpB,WAAW,GAAG,WAAW,CAAC,UAAU,EAAE,UAAC,KAAU;oBACrD,IAAI,KAAK,EAAE;wBACT,MAAM,IAAA,qBAAS,EAAC,GAAG,EAAE,gCAAgC,CAAC,CAAC;qBACxD;gBACH,CAAC,CAAC,CAAC;gBACY,qBAAM,IAAA,sBAAY,EAC/B,KAAK,EACL,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAC5B,EAAA;;gBAHK,MAAM,GAAG,SAGd;gBACD,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;;;;gBAEhB,GAAG,CAAC,MAAM,CAAC,OAAK,CAAC,UAAU,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,OAAK,CAAC,OAAO,EAAE,CAAC,CAAC;;;;;KAExE,CAAA;AAjBY,QAAA,YAAY,gBAiBxB;AAEM,IAAM,WAAW,GAAG,UAAO,GAAY,EAAE,GAAa;;;;;gBACrD,KAAK,GAAG,GAAG,CAAC,OAAO,CAAC,KAAe,CAAC;gBACpC,SAAS,GAAG,GAAG,CAAC,KAAK,CAAC,SAAmB,CAAC;;;;gBAE/B,qBAAM,IAAA,qBAAW,EAC9B,KAAK,EACL,SAAS,CACV,EAAA;;gBAHK,MAAM,GAAG,SAGd;gBACD,GAAG,CAAC,GAAG,CAAC,cAAc,EAAE,iBAAiB,CAAC,CAAC;gBAC3C,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;;;;gBAEhB,GAAG,CAAC,MAAM,CAAC,OAAK,CAAC,UAAU,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,OAAK,CAAC,OAAO,EAAE,CAAC,CAAC;;;;;KAExE,CAAA;AAbY,QAAA,WAAW,eAavB;AAEM,IAAM,gBAAgB,GAAG,UAAO,GAAY,EAAE,GAAa;;;;;gBAC1D,KAAK,GAAG,GAAG,CAAC,OAAO,CAAC,KAAe,CAAC;gBACpC,QAAQ,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,QAAkB,CAAC;;;;gBAE9B,qBAAM,IAAA,0BAAgB,EACnC,KAAK,EACL,QAAQ,CACT,EAAA;;gBAHK,MAAM,GAAG,SAGd;gBACD,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;;;;gBAEhB,GAAG,CAAC,MAAM,CAAC,OAAK,CAAC,UAAU,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,OAAK,CAAC,OAAO,EAAE,CAAC,CAAC;;;;;KAGxE,CAAA;AAbY,QAAA,gBAAgB,oBAa5B;AAEM,IAAM,aAAa,GAAG,UAAO,GAAY,EAAE,GAAa;;;;;gBACvD,KAAK,GAAG,GAAG,CAAC,OAAO,CAAC,KAAe,CAAC;gBACpC,SAAS,GAAG,GAAG,CAAC,KAAK,CAAC,SAAmB,CAAC;;;;gBAE/B,qBAAM,IAAA,uBAAa,EAChC,KAAK,EACL,SAAS,CACV,EAAA;;gBAHK,MAAM,GAAG,SAGd;gBACD,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;;;;gBAEhB,GAAG,CAAC,MAAM,CAAC,OAAK,CAAC,UAAU,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,OAAK,CAAC,OAAO,EAAE,CAAC,CAAC;;;;;KAExE,CAAA;AAZY,QAAA,aAAa,iBAYzB","sourcesContent":["import { Response, Request } from \"express\";\nimport { deleteInvoice, showInvoice, showRangeInvoice, storeInvoice } from \"../functions/invoice\";\nimport HTTPError from \"http-errors\";\nconst parseString = require('xml2js').parseString;\n\nexport const invoiceStore = async (req: Request, res: Response) => {\n  const token = req.headers.token as string;\n  const invoiceXML = req.body;\n  try {\n    const jsonInvoice = parseString(invoiceXML, (error: any) => {\n      if (error) {\n        throw HTTPError(400, 'Bad request: Error parsing XML');\n      }\n    });\n    const result = await storeInvoice(\n      token,\n      JSON.stringify(jsonInvoice)\n    );\n    res.json(result)\n  } catch (error) {\n    res.status(error.statusCode || 500).json({ message: error.message });\n  }\n}\n\nexport const invoiceShow = async (req: Request, res: Response) => {\n  const token = req.headers.token as string;\n  const invoiceId = req.query.invoiceId as string;\n  try {\n    const result = await showInvoice(\n      token,\n      invoiceId\n    );\n    res.set('Content-Type', 'application/xml');\n    res.json(result)\n  } catch (error) {\n    res.status(error.statusCode || 500).json({ message: error.message });\n  }\n}\n\nexport const invoiceShowRange = async (req: Request, res: Response) => {\n  const token = req.headers.token as string;\n  const quantity = +req.query.quantity as number; \n  try {\n    const result = await showRangeInvoice(\n      token,\n      quantity\n    );\n    res.json(result)\n  } catch (error) {\n    res.status(error.statusCode || 500).json({ message: error.message });\n  }\n  \n}\n\nexport const invoiceDelete = async (req: Request, res: Response) => {\n  const token = req.headers.token as string;\n  const invoiceId = req.query.invoiceId as string;\n  try {\n    const result = await deleteInvoice(\n      token,\n      invoiceId\n    );\n    res.json(result)\n  } catch (error) {\n    res.status(error.statusCode || 500).json({ message: error.message });\n  }\n}"]}