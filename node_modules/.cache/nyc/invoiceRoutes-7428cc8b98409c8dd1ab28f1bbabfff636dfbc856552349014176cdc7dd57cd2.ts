"use strict";function cov_1wi7o7zec9(){var path="/Users/yusramahomed/Desktop/SENG2021/se2021-23t1-einvoicing-api-h10a_CHEESECAKE-storage-api/src/routes/invoiceRoutes.ts";var hash="dfc661ca22cedac051e8a20f069e02f381ad38b7";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/yusramahomed/Desktop/SENG2021/se2021-23t1-einvoicing-api-h10a_CHEESECAKE-storage-api/src/routes/invoiceRoutes.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:16},end:{line:3,column:34}},"2":{start:{line:4,column:26},end:{line:4,column:69}},"3":{start:{line:5,column:14},end:{line:5,column:43}},"4":{start:{line:51,column:13},end:{line:51,column:36}},"5":{start:{line:110,column:0},end:{line:110,column:64}},"6":{start:{line:148,column:0},end:{line:148,column:61}},"7":{start:{line:202,column:0},end:{line:202,column:71}},"8":{start:{line:232,column:0},end:{line:232,column:68}},"9":{start:{line:271,column:0},end:{line:273,column:3}},"10":{start:{line:272,column:4},end:{line:272,column:35}},"11":{start:{line:274,column:0},end:{line:274,column:25}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:271,column:24},end:{line:271,column:25}},loc:{start:{line:271,column:44},end:{line:273,column:1}},line:271}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},f:{"0":0},b:{},inputSourceMap:{version:3,file:"/Users/yusramahomed/Desktop/SENG2021/se2021-23t1-einvoicing-api-h10a_CHEESECAKE-storage-api/src/routes/invoiceRoutes.ts",sources:["/Users/yusramahomed/Desktop/SENG2021/se2021-23t1-einvoicing-api-h10a_CHEESECAKE-storage-api/src/routes/invoiceRoutes.ts"],names:[],mappings:";;AAAA,mCAAiC;AAEjC,sEAK0C;AAC1C,4CAA2C;AAC3C,4CAA4C;AAC5C,uBAAuB;AAEvB,8CAA8C;AAC9C,kCAAkC;AAClC,uCAAuC;AACvC,2CAA2C;AAC3C,mEAAmE;AACnE,qDAAqD;AAGrD,qDAAqD;AACrD,qBAAqB;AACrB,qDAAqD;AAErD,UAAU;AACV,+BAA+B;AAC/B,8EAA8E;AAC9E,4BAA4B;AAC5B,sBAAsB;AACtB,mDAAmD;AACnD,WAAW;AAEX,0BAA0B;AAC1B,kCAAkC;AAClC,cAAc;AACd,8CAA8C;AAC9C,MAAM;AACN,IAAI;AAEJ,sEAAsE;AACtE,2CAA2C;AAE3C,oBAAoB;AACpB,4BAA4B;AAC5B,4EAA4E;AAC5E,IAAI;AAEJ,yCAAyC;AACzC,4BAA4B;AAC5B,UAAU;AACV,8EAA8E;AAC9E,kFAAkF;AAClF,uBAAuB;AACvB,mBAAmB;AACnB,gDAAgD;AAChD,QAAQ;AACR,kCAAkC;AAClC,cAAc;AACd,8CAA8C;AAC9C,MAAM;AACN,IAAI;AAEJ,sBAAsB;AACtB,IAAM,MAAM,GAAW,IAAA,gBAAM,GAAE,CAAC;AAChC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAyDG;AACH,MAAM,CAAC,IAAI,CAAC,gBAAgB,EAAE,gCAAY,CAAC,CAAC;AAE5C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAoCG;AAGH,MAAM,CAAC,GAAG,CAAC,eAAe,EAAE,+BAAW,CAAC,CAAC;AAEzC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAoDG;AACH,MAAM,CAAC,GAAG,CAAC,oBAAoB,EAAC,oCAAgB,CAAC,CAAC;AAGlD;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA4BG;AACH,MAAM,CAAC,MAAM,CAAC,iBAAiB,EAAE,iCAAa,CAAC,CAAC;AAChD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAqCG;AAEH,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,UAAC,GAAG,EAAE,GAAG;IAC/B,GAAG,CAAC,IAAI,CAAC,IAAA,aAAK,GAAE,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC;AAEH,kBAAe,MAAM,CAAC",sourcesContent:["import { Router } from \"express\";\n\nimport {\n  invoiceShowRange,\n  invoiceShow,\n  invoiceDelete,\n  invoiceStore\n} from \"../controllers/invoiceController\";\nimport { clear } from \"../functions/clear\";\n// import { getData, setData } from \"../db\";\n// import fs from \"fs\";\n\n// import { clear } from \"../functions/clear\";\n// import jwt from \"jsonwebtoken\";\n// import HTTPError from \"http-errors\";\n// import { db } from \"../config/firebase\";\n// import { invoiceStore } from \"../controllers/invoiceController\";\n// const parseString = require('xml2js').parseString;\n\n\n// async function authenticateFromDB(token: string) {\n//   // connect to db\n//   const data = await db.collection(\"users\").get();\n\n//   try {\n//     console.log(\"HELLOOOO\");\n//     const decodedToken = jwt.verify(token, \"cheesecake\") as jwt.JwtPayload;\n//     // iterate over users\n//     // if (!user) {\n//     //   throw HTTPError(400, \"Invalid token.\");\n//     // }\n\n//     // return a user id\n//     return decodedToken.userId;\n//   } catch {\n//     throw HTTPError(403, \"Invalid token.\");\n//   }\n// }\n\n// const storedData = fs.readFileSync(\"src/data.json\", { flag: \"r\" });\n// setData(JSON.parse(String(storedData)));\n\n// function save() {\n//   const data = getData();\n//   fs.writeFileSync(\"src/data.json\", JSON.stringify(data), { flag: \"w\" });\n// }\n\n// function authenticate(token: string) {\n//   const data = getData();\n//   try {\n//     const decodedToken = jwt.verify(token, \"cheesecake\") as jwt.JwtPayload;\n//     const user = data.users.find((u: any) => u.userId === decodedToken.userId);\n//     // invalid token\n//     if (!user) {\n//       throw HTTPError(400, \"Invalid token.\");\n//     }\n//     return decodedToken.userId;\n//   } catch {\n//     throw HTTPError(403, \"Invalid token.\");\n//   }\n// }\n\n// Create a new router\nconst router: Router = Router();\n/**\n * @swagger\n * /invoice/store:\n *   post:\n *     summary: Store an invoice\n *     tags: [Invoices]\n *     parameters:\n *       - in: header\n *         name: token\n *         required: true\n *         description: An authorization token\n *         schema:\n *           type: string\n *       - in: header\n *         name: Content-Type\n *         required: true\n *         description: The type of data sent in the request body\n *         schema:\n *           type: string\n *           enum: [application/xml]\n *       - in: body\n *         name: body\n *         required: true\n *         description: The invoice XML\n *         schema:\n *           type: string\n *     responses:\n *       '200':\n *         description: Successful storage\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 invoiceId:\n *                   type: string\n *                   description: An ID that corresponds to the invoice stored\n *       '415':\n *         description: Invalid XML\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 error:\n *                   type: string\n *                   description: Error message.\n *       '500':\n *         description: Unsuccessful storage, database full or connection error\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 error:\n *                   type: string\n *                   description: Error message.\n */\nrouter.post(\"/invoice/store\", invoiceStore);\n\n/**\n * @swagger\n * /invoice/show:\n *   get:\n *     summary: Get details of an invoice in XML format\n *     tags: [Invoices]\n *     parameters:\n *       - in: header\n *         name: token\n *         required: true\n *         description: An authorization token\n *         schema:\n *           type: string\n *       - in: query\n *         name: invoiceId\n *         required: true\n *         description: The ID of the invoice to retrieve\n *         schema:\n *           type: string\n *     responses:\n *       200:\n *         description: The invoice details\n *         content:\n *           application/xml:\n *             schema:\n *               type: object\n *               properties:\n *                 invoiceXML:\n *                   type: string\n *                   description: The XML of the invoice\n *       401:\n *         description: Unauthorized access\n *       404:\n *         description: The invoice with the specified ID was not found\n *       500:\n *         description: Internal server error\n */\n\n\nrouter.get(\"/invoice/show\", invoiceShow);\n\n/**\n * @swagger\n * /invoice/showRange:\n *   get:\n *     summary: Get a range of invoices\n *     tags: [Invoices]\n *     parameters:\n *       - in: header\n *         name: Authorization\n *         required: true\n *         description: An authorization token\n *         schema:\n *           type: string\n *       - in: query\n *         name: startDate\n *         required: true\n *         description: The start date of the invoice range to retrieve\n *         schema:\n *           type: string\n *       - in: query\n *         name: endDate\n *         required: true\n *         description: The end date of the invoice range to retrieve\n *         schema:\n *           type: string\n *     responses:\n *       200:\n *         description: The invoice details\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 invoicesXML:\n *                   type: array\n *                   items:\n *                     type: string\n *                     description: The XML of an invoice\n *       400:\n *         description: Invalid date range\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 error:\n *                   type: string\n *                   description: Error message.\n *       401:\n *         description: Unauthorized access\n *       500:\n *         description: Internal server error\n */\nrouter.get(\"/invoice/showRange\",invoiceShowRange);\n\n\n/**\n * @swagger\n * /invoice/delete/{id}:\n *   delete:\n *     summary: Delete an invoice\n *     tags: [Invoices]\n *     parameters:\n *       - in: header\n *         name: token\n *         required: true\n *         description: Authentication token\n *         schema:\n *           type: string\n *       - in: path\n *         name: invoiceId\n *         required: true\n *         description: The ID of the invoice to delete\n *         schema:\n *           type: string\n *     responses:\n *       200:\n *         description: The invoice was successfully deleted\n *       401:\n *         description: Unauthorized access\n *       404:\n *         description: The invoice with the specified ID was not found\n *       500:\n *         description: Internal server error\n */\nrouter.delete(\"/invoice/delete\", invoiceDelete);\n/**\n * @swagger\n * /invoice/status/{id}:\n *   get:\n *     summary: Get the status of an invoice\n *     tags: [Invoices]\n *     parameters:\n *       - in: header\n *         name: token\n *         required: true\n *         description: An authorization token\n *         schema:\n *           type: string\n *       - in: path\n *         name: id\n *         required: true\n *         description: The ID of the invoice to check the status of\n *         schema:\n *           type: string\n *     responses:\n *       200:\n *         description: The status of the invoice\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 status:\n *                   type: string\n *                   description: The status of the invoice\n *                   enum: [unpaid, partially_paid, paid, overdue]\n *       401:\n *         description: Unauthorized access\n *       404:\n *         description: The invoice with the specified ID was not found\n *       500:\n *         description: Internal server error\n */\n\nrouter.delete(\"/clear\", (req, res) => {\n  res.json(clear());\n});\n\nexport default router;\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"dfc661ca22cedac051e8a20f069e02f381ad38b7"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1wi7o7zec9=function(){return actualCoverage;};}return actualCoverage;}cov_1wi7o7zec9();cov_1wi7o7zec9().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});var express_1=(cov_1wi7o7zec9().s[1]++,require("express"));var invoiceController_1=(cov_1wi7o7zec9().s[2]++,require("../controllers/invoiceController"));var clear_1=(cov_1wi7o7zec9().s[3]++,require("../functions/clear"));// import { getData, setData } from "../db";
// import fs from "fs";
// import { clear } from "../functions/clear";
// import jwt from "jsonwebtoken";
// import HTTPError from "http-errors";
// import { db } from "../config/firebase";
// import { invoiceStore } from "../controllers/invoiceController";
// const parseString = require('xml2js').parseString;
// async function authenticateFromDB(token: string) {
//   // connect to db
//   const data = await db.collection("users").get();
//   try {
//     console.log("HELLOOOO");
//     const decodedToken = jwt.verify(token, "cheesecake") as jwt.JwtPayload;
//     // iterate over users
//     // if (!user) {
//     //   throw HTTPError(400, "Invalid token.");
//     // }
//     // return a user id
//     return decodedToken.userId;
//   } catch {
//     throw HTTPError(403, "Invalid token.");
//   }
// }
// const storedData = fs.readFileSync("src/data.json", { flag: "r" });
// setData(JSON.parse(String(storedData)));
// function save() {
//   const data = getData();
//   fs.writeFileSync("src/data.json", JSON.stringify(data), { flag: "w" });
// }
// function authenticate(token: string) {
//   const data = getData();
//   try {
//     const decodedToken = jwt.verify(token, "cheesecake") as jwt.JwtPayload;
//     const user = data.users.find((u: any) => u.userId === decodedToken.userId);
//     // invalid token
//     if (!user) {
//       throw HTTPError(400, "Invalid token.");
//     }
//     return decodedToken.userId;
//   } catch {
//     throw HTTPError(403, "Invalid token.");
//   }
// }
// Create a new router
var router=(cov_1wi7o7zec9().s[4]++,(0,express_1.Router)());/**
 * @swagger
 * /invoice/store:
 *   post:
 *     summary: Store an invoice
 *     tags: [Invoices]
 *     parameters:
 *       - in: header
 *         name: token
 *         required: true
 *         description: An authorization token
 *         schema:
 *           type: string
 *       - in: header
 *         name: Content-Type
 *         required: true
 *         description: The type of data sent in the request body
 *         schema:
 *           type: string
 *           enum: [application/xml]
 *       - in: body
 *         name: body
 *         required: true
 *         description: The invoice XML
 *         schema:
 *           type: string
 *     responses:
 *       '200':
 *         description: Successful storage
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 invoiceId:
 *                   type: string
 *                   description: An ID that corresponds to the invoice stored
 *       '415':
 *         description: Invalid XML
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 *                   description: Error message.
 *       '500':
 *         description: Unsuccessful storage, database full or connection error
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 *                   description: Error message.
 */cov_1wi7o7zec9().s[5]++;router.post("/invoice/store",invoiceController_1.invoiceStore);/**
 * @swagger
 * /invoice/show:
 *   get:
 *     summary: Get details of an invoice in XML format
 *     tags: [Invoices]
 *     parameters:
 *       - in: header
 *         name: token
 *         required: true
 *         description: An authorization token
 *         schema:
 *           type: string
 *       - in: query
 *         name: invoiceId
 *         required: true
 *         description: The ID of the invoice to retrieve
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: The invoice details
 *         content:
 *           application/xml:
 *             schema:
 *               type: object
 *               properties:
 *                 invoiceXML:
 *                   type: string
 *                   description: The XML of the invoice
 *       401:
 *         description: Unauthorized access
 *       404:
 *         description: The invoice with the specified ID was not found
 *       500:
 *         description: Internal server error
 */cov_1wi7o7zec9().s[6]++;router.get("/invoice/show",invoiceController_1.invoiceShow);/**
 * @swagger
 * /invoice/showRange:
 *   get:
 *     summary: Get a range of invoices
 *     tags: [Invoices]
 *     parameters:
 *       - in: header
 *         name: Authorization
 *         required: true
 *         description: An authorization token
 *         schema:
 *           type: string
 *       - in: query
 *         name: startDate
 *         required: true
 *         description: The start date of the invoice range to retrieve
 *         schema:
 *           type: string
 *       - in: query
 *         name: endDate
 *         required: true
 *         description: The end date of the invoice range to retrieve
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: The invoice details
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 invoicesXML:
 *                   type: array
 *                   items:
 *                     type: string
 *                     description: The XML of an invoice
 *       400:
 *         description: Invalid date range
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 *                   description: Error message.
 *       401:
 *         description: Unauthorized access
 *       500:
 *         description: Internal server error
 */cov_1wi7o7zec9().s[7]++;router.get("/invoice/showRange",invoiceController_1.invoiceShowRange);/**
 * @swagger
 * /invoice/delete/{id}:
 *   delete:
 *     summary: Delete an invoice
 *     tags: [Invoices]
 *     parameters:
 *       - in: header
 *         name: token
 *         required: true
 *         description: Authentication token
 *         schema:
 *           type: string
 *       - in: path
 *         name: invoiceId
 *         required: true
 *         description: The ID of the invoice to delete
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: The invoice was successfully deleted
 *       401:
 *         description: Unauthorized access
 *       404:
 *         description: The invoice with the specified ID was not found
 *       500:
 *         description: Internal server error
 */cov_1wi7o7zec9().s[8]++;router.delete("/invoice/delete",invoiceController_1.invoiceDelete);/**
 * @swagger
 * /invoice/status/{id}:
 *   get:
 *     summary: Get the status of an invoice
 *     tags: [Invoices]
 *     parameters:
 *       - in: header
 *         name: token
 *         required: true
 *         description: An authorization token
 *         schema:
 *           type: string
 *       - in: path
 *         name: id
 *         required: true
 *         description: The ID of the invoice to check the status of
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: The status of the invoice
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 status:
 *                   type: string
 *                   description: The status of the invoice
 *                   enum: [unpaid, partially_paid, paid, overdue]
 *       401:
 *         description: Unauthorized access
 *       404:
 *         description: The invoice with the specified ID was not found
 *       500:
 *         description: Internal server error
 */cov_1wi7o7zec9().s[9]++;router.delete("/clear",function(req,res){cov_1wi7o7zec9().f[0]++;cov_1wi7o7zec9().s[10]++;res.json((0,clear_1.clear)());});cov_1wi7o7zec9().s[11]++;exports.default=router;//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,