"use strict";function cov_1v54ghilda(){var path="/Users/yusramahomed/Desktop/seng2021--/se2021-23t1-einvoicing-api-h10a_CHEESECAKE-storage-api/src/swaggerOptions.ts";var hash="d46b9aef223944c95f1a259aaa9702c23eb8afe1";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/yusramahomed/Desktop/seng2021--/se2021-23t1-einvoicing-api-h10a_CHEESECAKE-storage-api/src/swaggerOptions.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:0},end:{line:3,column:25}},"2":{start:{line:4,column:0},end:{line:19,column:2}}},fnMap:{},branchMap:{},s:{"0":0,"1":0,"2":0},f:{},b:{},inputSourceMap:{version:3,file:"/Users/yusramahomed/Desktop/seng2021--/se2021-23t1-einvoicing-api-h10a_CHEESECAKE-storage-api/src/swaggerOptions.ts",sources:["/Users/yusramahomed/Desktop/seng2021--/se2021-23t1-einvoicing-api-h10a_CHEESECAKE-storage-api/src/swaggerOptions.ts"],names:[],mappings:";;;AAAa,QAAA,OAAO,GAAG;IACrB,UAAU,EAAE;QACV,OAAO,EAAE,OAAO;QAChB,IAAI,EAAE;YACJ,KAAK,EAAE,WAAW;YAClB,OAAO,EAAE,OAAO;YAChB,WAAW,EAAE,sCAAsC;SACpD;QACD,OAAO,EAAE;YACP;gBACE,GAAG,EAAE,wBAAwB;aAC9B;SACF;KACF;IACD,IAAI,EAAE,CAAC,yBAAyB,CAAC;CAClC,CAAC;AAEF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6EG;AAGH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6EG;AAEH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAuEG;AAIH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2CG;AAGH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAkEG;AAEH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA4DG;AAIH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAsDG;AAEH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAsEG;AAGH;;;;;;;;;;;;;;;;;;;GAmBG",sourcesContent:["export const options = {\n  definition: {\n    openapi: \"3.0.0\",\n    info: {\n      title: \"Tasks API\",\n      version: \"1.0.0\",\n      description: \"A simple Express Invoice storage API\",\n    },\n    servers: [\n      {\n        url: \"http://127.0.0.1:3200/\",\n      },\n    ],\n  },\n  apis: ['./src/swaggerOptions.ts'],\n};\n\n/**\n * @swagger\n * /auth/registerCompany:\n *   post:\n *     summary: Register a new company\n *     tags: [Authentication]\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             properties:\n *                companyEmail:\n *                  type: string\n *                  pattern: '^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$'\n *                  description: The email of the company's account\n *                companyName:\n *                  type: string\n *                  description: The name of the company\n *                numEmployees:\n *                  type: integer\n *                  description: The number of employees in the company\n *                ABN:\n *                  type: integer\n *                  description: The ABN of the company\n *           example:\n *             companyName: \"Acme Inc.\"\n *             companyEmail: \"admin@acme.com\"\n *             numEmployees: 50\n *             ABN: 12345678901\n *     responses:\n *       '200':\n *         description: Company registered successfully\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 companyKey:\n *                   type: string\n *                   description: The unique key generated for the registered company\n *             example:\n *               companyKey: \"abc123\"\n *       '400':\n *         description: Bad request\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 message:\n *                   type: string\n *                   description: Error message\n *                   example: Email is invalid.\n *       '409':\n *         description: Invalid request data\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 message:\n *                   type: string\n *                   description: Error message\n *                   example: Company is already registered\n *       '500':\n *         description: Internal server error\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 message:\n *                   type: string\n *                   description: Error message\n *                   example: An error occurred while processing the request.\n */\n\n\n/**\n * @swagger\n * /auth/registerUser:\n *   post:\n *     summary: Add a new user\n *     tags: [Authentication]\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             $ref: '#/components/schemas/User'\n *           example:\n *            email: z0000000@ad.unsw.edu.au\n *            password: password123\n *            name: John Smith\n *            companyKey: 0\n *         application/xml:\n *           schema:\n *             type: string\n *     responses:\n *       '200':\n *         description: The user was successfully registered\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 token:\n *                   type: string\n *                   description: An authentication token for the registered user\n *                 userId:\n *                   type: string\n *                   description: The ID of the registered user\n *       '400':\n *         description: Bad request\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 message:\n *                   type: string\n *                   description: Error message\n *                   example: Email is invalid.\n *       '409':\n *         description: Invalid request data\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 message:\n *                   type: string\n *                   description: Error message\n *                   example: Email is already registered\n  *       '404':\n *         description: Invalid request data\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 message:\n *                   type: string\n *                   description: Error message\n *                   example: Company key cannot be found on server\n *       '500':\n *         description: Internal server error\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 message:\n *                   type: string\n *                   description: Error message.\n */\n\n/**\n * @swagger\n * /auth/login:\n *   post:\n *     summary: Login a user\n *     tags: [Authentication]\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             properties:\n *               email:\n *                 type: string\n *                 pattern: '^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$'\n *                 description: User's account email\n *               password:\n *                 type: string\n *                 minLength: 6\n *                 description: An encrypted password used for logging in\n *           example:\n *             email: john.doe@example.com\n *             password: password123\n *     responses:\n *       '200':\n *         description: Successful login\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 token:\n *                   type: string\n *                   description: JWT token for authentication.\n *                 userId:\n *                   type: string\n *                   description: User ID of the logged in user.\n *       '400':\n *         description: Invalid email\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 message:\n *                   type: string\n *                   description: Error message.\n *                   example: Email is invalid.\n *       '401':\n *         description: User with this email does not exist or password is incorrect\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 message:\n *                   type: string\n *                   description: Error message.\n *                   example: User with this email does not exist or password is incorrect.\n *       '500':\n *         description: Internal server error\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 message:\n *                   type: string\n *                   description: Error message.\n *                   example: An error occurred while processing the request.\n */\n\n\n\n/**\n * @swagger\n * /auth/logout:\n *   post:\n *     summary: Logout a user\n *     tags: [Authentication]\n *     parameters:\n *       - in: header\n *         name: token\n *         required: true\n *         schema:\n *           type: string\n *           description: JWT token for authentication.\n *     responses:\n *       '200':\n *         description: Successful logout\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               example: {\"message\": \"User logged out successfully\"}\n *       '401':\n *         description: Unauthorized - the provided token was invalid or expired\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 message:\n *                   type: string\n *                   description: Error message.\n *                   example: Invalid token\n *       '500':\n *         description: Internal server error\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 message:\n *                   type: string\n *                   description: Error message.\n *                   example: An error occurred while processing the request.\n */\n\n\n/**\n * @swagger\n * /invoice/store:\n *   post:\n *     summary: Store an invoice\n *     tags: [Invoices]\n *     parameters:\n *       - in: header\n *         name: token\n *         required: true\n *         description: An authorization token\n *         schema:\n *           type: string\n *       - in: header\n *         name: Content-Type\n *         required: true\n *         description: The type of data sent in the request body\n *         schema:\n *           type: string\n *           enum: [application/xml]\n *       - in: body\n *         name: body\n *         required: true\n *         description: The invoice XML\n \n *     responses:\n *       '200':\n *         description: Successful storage\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 invoiceId:\n *                   type: string\n *                   description: An ID that corresponds to the invoice stored\n *       '400':\n *         description: Bad request, invalid XML\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 error:\n *                   type: string\n *                   description: Error message.\n *       '401':\n *         description: Unauthorized, invalid token\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 error:\n *                   type: string\n *                   description: Error message.\n *       '500':\n *         description: Unsuccessful storage, database full or connection error\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 error:\n *                   type: string\n *                   description: Error message.\n */\n\n/**\n * @swagger\n * /invoice/show:\n *   get:\n *     summary: Get details of an invoice in XML format\n *     tags: [Invoices]\n *     parameters:\n *       - in: header\n *         name: token\n *         required: true\n *         description: An authorization token\n *         schema:\n *           type: string\n *       - in: query\n *         name: invoiceId\n *         required: true\n *         description: The ID of the invoice to retrieve\n *         schema:\n *           type: string\n *     responses:\n *       200:\n *         description: The invoice details\n *         content:\n *           application/xml:\n *             schema:\n *               type: object\n *               properties:\n *                 invoice:\n *                   type: string\n *                   description: The XML of the invoice\n *       '403':\n *         description: Forbidden error,user cannot view this invoice\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 error:\n *                   type: string\n *                   description: Error message.\n *       '401':\n *         description: Unauthorized, invalid token\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 error:\n *                   type: string\n *                   description: Error message.\n *       '500':\n *         description: Unsuccessful storage, database full or connection error\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 error:\n *                   type: string\n *                   description: Error message.\n */\n\n\n\n/**\n * @swagger\n * /invoice/showRange:\n *   get:\n *     summary: Get details of a range of invoices in XML format\n *     tags: [Invoices]\n *     parameters:\n *       - in: header\n *         name: token\n *         required: true\n *         description: An authorization token\n *         schema:\n *           type: string\n *       - in: query\n *         name: quantity\n *         required: true\n *         description: The number of invoices to retrieve\n *         schema:\n *           type: integer\n *           minimum: 1\n *           maximum: 100\n *     responses:\n *       200:\n *         description: The invoice details\n *         content:\n *           application/xml:\n *             schema:\n *               type: object\n *               properties:\n *                 invoices:\n *                   type: array\n *                   items:\n *                     type: string\n *                   description: The XML of the invoices\n *       401:\n *         description: Unauthorized access\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 message:\n *                   type: string\n *                   example: Unauthorized access\n *       '500':\n *         description: Unsuccessful storage, database full or connection error\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 error:\n *                   type: string\n *                   description: Error message.\n */\n\n/**\n * @swagger\n * /invoice/delete:\n *   delete:\n *     summary: Delete an invoice\n *     tags: [Invoices]\n *     parameters:\n *       - in: header\n *         name: token\n *         required: true\n *         description: Authentication token\n *         schema:\n *           type: string\n *       - in: query\n *         name: invoiceId\n *         required: true\n *         description: The ID of the invoice to delete\n *         schema:\n *           type: string\n *     responses:\n *       200:\n *         description: The invoice was successfully deleted\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 message:\n *                   type: string\n *                   example: Invoice deleted successfully\n *       401:\n *         description: Unauthorized access\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 message:\n *                   type: string\n *                   example: Unauthorized access\n *       403:\n *         description: User cannot delete this invoice\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 message:\n *                   type: string\n *                   example: User cannot delete this invoice\n *       404:\n *         description: The invoice with the specified ID was not found\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 message:\n *                   type: string\n *                   example: Invoice not found\n *       500:\n *         description: Internal server error\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 message:\n *                   type: string\n *                   example: Internal server error\n */\n\n\n/**\n * @swagger\n * /clear:\n *   delete:\n *     summary: Delete all users, companies, and invoices from the database\n *     tags: [Admin]\n *     responses:\n *       200:\n *         description: All data has been deleted from the database\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 message:\n *                   type: string\n *                   description: A message indicating that all data has been deleted\n *       500:\n *         description: Internal server error\n */\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"d46b9aef223944c95f1a259aaa9702c23eb8afe1"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1v54ghilda=function(){return actualCoverage;};}return actualCoverage;}cov_1v54ghilda();cov_1v54ghilda().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_1v54ghilda().s[1]++;exports.options=void 0;cov_1v54ghilda().s[2]++;exports.options={definition:{openapi:"3.0.0",info:{title:"Tasks API",version:"1.0.0",description:"A simple Express Invoice storage API"},servers:[{url:"http://127.0.0.1:3200/"}]},apis:['./src/swaggerOptions.ts']};/**
 * @swagger
 * /auth/registerCompany:
 *   post:
 *     summary: Register a new company
 *     tags: [Authentication]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *                companyEmail:
 *                  type: string
 *                  pattern: '^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$'
 *                  description: The email of the company's account
 *                companyName:
 *                  type: string
 *                  description: The name of the company
 *                numEmployees:
 *                  type: integer
 *                  description: The number of employees in the company
 *                ABN:
 *                  type: integer
 *                  description: The ABN of the company
 *           example:
 *             companyName: "Acme Inc."
 *             companyEmail: "admin@acme.com"
 *             numEmployees: 50
 *             ABN: 12345678901
 *     responses:
 *       '200':
 *         description: Company registered successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 companyKey:
 *                   type: string
 *                   description: The unique key generated for the registered company
 *             example:
 *               companyKey: "abc123"
 *       '400':
 *         description: Bad request
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   description: Error message
 *                   example: Email is invalid.
 *       '409':
 *         description: Invalid request data
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   description: Error message
 *                   example: Company is already registered
 *       '500':
 *         description: Internal server error
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   description: Error message
 *                   example: An error occurred while processing the request.
 */ /**
 * @swagger
 * /auth/registerUser:
 *   post:
 *     summary: Add a new user
 *     tags: [Authentication]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/User'
 *           example:
 *            email: z0000000@ad.unsw.edu.au
 *            password: password123
 *            name: John Smith
 *            companyKey: 0
 *         application/xml:
 *           schema:
 *             type: string
 *     responses:
 *       '200':
 *         description: The user was successfully registered
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 token:
 *                   type: string
 *                   description: An authentication token for the registered user
 *                 userId:
 *                   type: string
 *                   description: The ID of the registered user
 *       '400':
 *         description: Bad request
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   description: Error message
 *                   example: Email is invalid.
 *       '409':
 *         description: Invalid request data
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   description: Error message
 *                   example: Email is already registered
  *       '404':
 *         description: Invalid request data
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   description: Error message
 *                   example: Company key cannot be found on server
 *       '500':
 *         description: Internal server error
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   description: Error message.
 */ /**
 * @swagger
 * /auth/login:
 *   post:
 *     summary: Login a user
 *     tags: [Authentication]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               email:
 *                 type: string
 *                 pattern: '^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$'
 *                 description: User's account email
 *               password:
 *                 type: string
 *                 minLength: 6
 *                 description: An encrypted password used for logging in
 *           example:
 *             email: john.doe@example.com
 *             password: password123
 *     responses:
 *       '200':
 *         description: Successful login
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 token:
 *                   type: string
 *                   description: JWT token for authentication.
 *                 userId:
 *                   type: string
 *                   description: User ID of the logged in user.
 *       '400':
 *         description: Invalid email
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   description: Error message.
 *                   example: Email is invalid.
 *       '401':
 *         description: User with this email does not exist or password is incorrect
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   description: Error message.
 *                   example: User with this email does not exist or password is incorrect.
 *       '500':
 *         description: Internal server error
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   description: Error message.
 *                   example: An error occurred while processing the request.
 */ /**
 * @swagger
 * /auth/logout:
 *   post:
 *     summary: Logout a user
 *     tags: [Authentication]
 *     parameters:
 *       - in: header
 *         name: token
 *         required: true
 *         schema:
 *           type: string
 *           description: JWT token for authentication.
 *     responses:
 *       '200':
 *         description: Successful logout
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               example: {"message": "User logged out successfully"}
 *       '401':
 *         description: Unauthorized - the provided token was invalid or expired
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   description: Error message.
 *                   example: Invalid token
 *       '500':
 *         description: Internal server error
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   description: Error message.
 *                   example: An error occurred while processing the request.
 */ /**
 * @swagger
 * /invoice/store:
 *   post:
 *     summary: Store an invoice
 *     tags: [Invoices]
 *     parameters:
 *       - in: header
 *         name: token
 *         required: true
 *         description: An authorization token
 *         schema:
 *           type: string
 *       - in: header
 *         name: Content-Type
 *         required: true
 *         description: The type of data sent in the request body
 *         schema:
 *           type: string
 *           enum: [application/xml]
 *       - in: body
 *         name: body
 *         required: true
 *         description: The invoice XML
 
 *     responses:
 *       '200':
 *         description: Successful storage
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 invoiceId:
 *                   type: string
 *                   description: An ID that corresponds to the invoice stored
 *       '400':
 *         description: Bad request, invalid XML
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 *                   description: Error message.
 *       '401':
 *         description: Unauthorized, invalid token
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 *                   description: Error message.
 *       '500':
 *         description: Unsuccessful storage, database full or connection error
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 *                   description: Error message.
 */ /**
 * @swagger
 * /invoice/show:
 *   get:
 *     summary: Get details of an invoice in XML format
 *     tags: [Invoices]
 *     parameters:
 *       - in: header
 *         name: token
 *         required: true
 *         description: An authorization token
 *         schema:
 *           type: string
 *       - in: query
 *         name: invoiceId
 *         required: true
 *         description: The ID of the invoice to retrieve
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: The invoice details
 *         content:
 *           application/xml:
 *             schema:
 *               type: object
 *               properties:
 *                 invoice:
 *                   type: string
 *                   description: The XML of the invoice
 *       '403':
 *         description: Forbidden error,user cannot view this invoice
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 *                   description: Error message.
 *       '401':
 *         description: Unauthorized, invalid token
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 *                   description: Error message.
 *       '500':
 *         description: Unsuccessful storage, database full or connection error
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 *                   description: Error message.
 */ /**
 * @swagger
 * /invoice/showRange:
 *   get:
 *     summary: Get details of a range of invoices in XML format
 *     tags: [Invoices]
 *     parameters:
 *       - in: header
 *         name: token
 *         required: true
 *         description: An authorization token
 *         schema:
 *           type: string
 *       - in: query
 *         name: quantity
 *         required: true
 *         description: The number of invoices to retrieve
 *         schema:
 *           type: integer
 *           minimum: 1
 *           maximum: 100
 *     responses:
 *       200:
 *         description: The invoice details
 *         content:
 *           application/xml:
 *             schema:
 *               type: object
 *               properties:
 *                 invoices:
 *                   type: array
 *                   items:
 *                     type: string
 *                   description: The XML of the invoices
 *       401:
 *         description: Unauthorized access
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: Unauthorized access
 *       '500':
 *         description: Unsuccessful storage, database full or connection error
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 *                   description: Error message.
 */ /**
 * @swagger
 * /invoice/delete:
 *   delete:
 *     summary: Delete an invoice
 *     tags: [Invoices]
 *     parameters:
 *       - in: header
 *         name: token
 *         required: true
 *         description: Authentication token
 *         schema:
 *           type: string
 *       - in: query
 *         name: invoiceId
 *         required: true
 *         description: The ID of the invoice to delete
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: The invoice was successfully deleted
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: Invoice deleted successfully
 *       401:
 *         description: Unauthorized access
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: Unauthorized access
 *       403:
 *         description: User cannot delete this invoice
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: User cannot delete this invoice
 *       404:
 *         description: The invoice with the specified ID was not found
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: Invoice not found
 *       500:
 *         description: Internal server error
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: Internal server error
 */ /**
 * @swagger
 * /clear:
 *   delete:
 *     summary: Delete all users, companies, and invoices from the database
 *     tags: [Admin]
 *     responses:
 *       200:
 *         description: All data has been deleted from the database
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   description: A message indicating that all data has been deleted
 *       500:
 *         description: Internal server error
 */ //# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,