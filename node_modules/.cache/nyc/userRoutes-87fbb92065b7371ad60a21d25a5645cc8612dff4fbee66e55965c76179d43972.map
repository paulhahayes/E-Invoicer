{"version":3,"file":"/Users/yusramahomed/Desktop/SENG2021/se2021-23t1-einvoicing-api-h10a_CHEESECAKE-storage-api/src/routes/userRoutes.ts","sources":["/Users/yusramahomed/Desktop/SENG2021/se2021-23t1-einvoicing-api-h10a_CHEESECAKE-storage-api/src/routes/userRoutes.ts"],"names":[],"mappings":";;AAAA,mCAAiC;AACjC,gEAAkE;AAElE,IAAM,MAAM,GAAG,IAAA,gBAAM,GAAE,CAAC;AACxB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAmCG;AAEH;;;;;;;;;;GAUG;AAEH;;;;;;;;;;;;;;;;;;GAkBG;AACH,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,yBAAQ,CAAC,CAAC;AAE/B;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AACH,MAAM,CAAC,GAAG,CAAC,YAAY,EAAE,wBAAO,CAAC,CAAC;AAElC,kBAAe,MAAM,CAAC","sourcesContent":["import { Router } from \"express\";\nimport { getUsers, getUser } from \"../controllers/userController\";\n\nconst router = Router();\n/**\n * @swagger\n * components:\n *  schemas:\n *    User:\n *      type: object\n *      properties:\n *        email:\n *          type: string\n *          pattern: '^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$'\n *          description: User's account email\n *        password:\n *          type: string\n *          minLength: 6\n *          description: An encrypted password used for logging in\n *        id:\n *          type: string\n *          description: An auto-generated ID of the user\n *        name:\n *          type: string\n *          description: The user's name\n *        companyKey:\n *          type: string\n *          description: The user's company name\n *      required: [email, password, name]\n *      example:\n *        email: z0000000@ad.unsw.edu.au\n *        password: password123\n *        name: John Smith\n *        companyKey: UNSW\n *        id: abc123def456\n *    Invoice:\n *      type: object\n *\n *\n */\n\n/**\n * @swagger\n * tags:\n *  - name: Users\n *    description: User endpoints\n *  - name: Invoices\n *    description: Invoice endpoints\n *  - name: Authentication\n *    description: Authentication endpoints\n *\n */\n\n/**\n * @swagger\n * /users:\n *  get:\n *   summary: Get list of users\n *   tags: [Users]\n *   responses:\n *    200:\n *      description: The list of users\n *      content:\n *        application/json:\n *          schema:\n *            type: array\n *            items:\n *              $ref: '#/components/schemas/User'\n *    500:\n *      description: Internal server error\n *\n */\nrouter.get(\"/users\", getUsers);\n\n/**\n * @swagger\n * /users/{id}:\n *   get:\n *     summary: Get a user by ID\n *     tags: [Users]\n *     parameters:\n *       - in: path\n *         name: id\n *         required: true\n *         description: The ID of the user to retrieve\n *         schema:\n *           type: string\n *     responses:\n *       '200':\n *         description: The user with the given ID\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/User'\n *       '404':\n *         description: User not found\n *       '500':\n *         description: Internal server error\n */\nrouter.get(\"/users/:id\", getUser);\n\nexport default router;\n"]}