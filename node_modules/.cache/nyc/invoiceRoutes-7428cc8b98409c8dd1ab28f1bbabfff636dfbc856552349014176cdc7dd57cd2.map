{"version":3,"file":"/Users/yusramahomed/Desktop/SENG2021/se2021-23t1-einvoicing-api-h10a_CHEESECAKE-storage-api/src/routes/invoiceRoutes.ts","sources":["/Users/yusramahomed/Desktop/SENG2021/se2021-23t1-einvoicing-api-h10a_CHEESECAKE-storage-api/src/routes/invoiceRoutes.ts"],"names":[],"mappings":";;AAAA,mCAAiC;AAEjC,sEAK0C;AAC1C,4CAA2C;AAC3C,4CAA4C;AAC5C,uBAAuB;AAEvB,8CAA8C;AAC9C,kCAAkC;AAClC,uCAAuC;AACvC,2CAA2C;AAC3C,mEAAmE;AACnE,qDAAqD;AAGrD,qDAAqD;AACrD,qBAAqB;AACrB,qDAAqD;AAErD,UAAU;AACV,+BAA+B;AAC/B,8EAA8E;AAC9E,4BAA4B;AAC5B,sBAAsB;AACtB,mDAAmD;AACnD,WAAW;AAEX,0BAA0B;AAC1B,kCAAkC;AAClC,cAAc;AACd,8CAA8C;AAC9C,MAAM;AACN,IAAI;AAEJ,sEAAsE;AACtE,2CAA2C;AAE3C,oBAAoB;AACpB,4BAA4B;AAC5B,4EAA4E;AAC5E,IAAI;AAEJ,yCAAyC;AACzC,4BAA4B;AAC5B,UAAU;AACV,8EAA8E;AAC9E,kFAAkF;AAClF,uBAAuB;AACvB,mBAAmB;AACnB,gDAAgD;AAChD,QAAQ;AACR,kCAAkC;AAClC,cAAc;AACd,8CAA8C;AAC9C,MAAM;AACN,IAAI;AAEJ,sBAAsB;AACtB,IAAM,MAAM,GAAW,IAAA,gBAAM,GAAE,CAAC;AAChC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAyDG;AACH,MAAM,CAAC,IAAI,CAAC,gBAAgB,EAAE,gCAAY,CAAC,CAAC;AAE5C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAoCG;AAGH,MAAM,CAAC,GAAG,CAAC,eAAe,EAAE,+BAAW,CAAC,CAAC;AAEzC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAoDG;AACH,MAAM,CAAC,GAAG,CAAC,oBAAoB,EAAC,oCAAgB,CAAC,CAAC;AAGlD;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA4BG;AACH,MAAM,CAAC,MAAM,CAAC,iBAAiB,EAAE,iCAAa,CAAC,CAAC;AAChD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAqCG;AAEH,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,UAAC,GAAG,EAAE,GAAG;IAC/B,GAAG,CAAC,IAAI,CAAC,IAAA,aAAK,GAAE,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC;AAEH,kBAAe,MAAM,CAAC","sourcesContent":["import { Router } from \"express\";\n\nimport {\n  invoiceShowRange,\n  invoiceShow,\n  invoiceDelete,\n  invoiceStore\n} from \"../controllers/invoiceController\";\nimport { clear } from \"../functions/clear\";\n// import { getData, setData } from \"../db\";\n// import fs from \"fs\";\n\n// import { clear } from \"../functions/clear\";\n// import jwt from \"jsonwebtoken\";\n// import HTTPError from \"http-errors\";\n// import { db } from \"../config/firebase\";\n// import { invoiceStore } from \"../controllers/invoiceController\";\n// const parseString = require('xml2js').parseString;\n\n\n// async function authenticateFromDB(token: string) {\n//   // connect to db\n//   const data = await db.collection(\"users\").get();\n\n//   try {\n//     console.log(\"HELLOOOO\");\n//     const decodedToken = jwt.verify(token, \"cheesecake\") as jwt.JwtPayload;\n//     // iterate over users\n//     // if (!user) {\n//     //   throw HTTPError(400, \"Invalid token.\");\n//     // }\n\n//     // return a user id\n//     return decodedToken.userId;\n//   } catch {\n//     throw HTTPError(403, \"Invalid token.\");\n//   }\n// }\n\n// const storedData = fs.readFileSync(\"src/data.json\", { flag: \"r\" });\n// setData(JSON.parse(String(storedData)));\n\n// function save() {\n//   const data = getData();\n//   fs.writeFileSync(\"src/data.json\", JSON.stringify(data), { flag: \"w\" });\n// }\n\n// function authenticate(token: string) {\n//   const data = getData();\n//   try {\n//     const decodedToken = jwt.verify(token, \"cheesecake\") as jwt.JwtPayload;\n//     const user = data.users.find((u: any) => u.userId === decodedToken.userId);\n//     // invalid token\n//     if (!user) {\n//       throw HTTPError(400, \"Invalid token.\");\n//     }\n//     return decodedToken.userId;\n//   } catch {\n//     throw HTTPError(403, \"Invalid token.\");\n//   }\n// }\n\n// Create a new router\nconst router: Router = Router();\n/**\n * @swagger\n * /invoice/store:\n *   post:\n *     summary: Store an invoice\n *     tags: [Invoices]\n *     parameters:\n *       - in: header\n *         name: token\n *         required: true\n *         description: An authorization token\n *         schema:\n *           type: string\n *       - in: header\n *         name: Content-Type\n *         required: true\n *         description: The type of data sent in the request body\n *         schema:\n *           type: string\n *           enum: [application/xml]\n *       - in: body\n *         name: body\n *         required: true\n *         description: The invoice XML\n *         schema:\n *           type: string\n *     responses:\n *       '200':\n *         description: Successful storage\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 invoiceId:\n *                   type: string\n *                   description: An ID that corresponds to the invoice stored\n *       '415':\n *         description: Invalid XML\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 error:\n *                   type: string\n *                   description: Error message.\n *       '500':\n *         description: Unsuccessful storage, database full or connection error\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 error:\n *                   type: string\n *                   description: Error message.\n */\nrouter.post(\"/invoice/store\", invoiceStore);\n\n/**\n * @swagger\n * /invoice/show:\n *   get:\n *     summary: Get details of an invoice in XML format\n *     tags: [Invoices]\n *     parameters:\n *       - in: header\n *         name: token\n *         required: true\n *         description: An authorization token\n *         schema:\n *           type: string\n *       - in: query\n *         name: invoiceId\n *         required: true\n *         description: The ID of the invoice to retrieve\n *         schema:\n *           type: string\n *     responses:\n *       200:\n *         description: The invoice details\n *         content:\n *           application/xml:\n *             schema:\n *               type: object\n *               properties:\n *                 invoiceXML:\n *                   type: string\n *                   description: The XML of the invoice\n *       401:\n *         description: Unauthorized access\n *       404:\n *         description: The invoice with the specified ID was not found\n *       500:\n *         description: Internal server error\n */\n\n\nrouter.get(\"/invoice/show\", invoiceShow);\n\n/**\n * @swagger\n * /invoice/showRange:\n *   get:\n *     summary: Get a range of invoices\n *     tags: [Invoices]\n *     parameters:\n *       - in: header\n *         name: Authorization\n *         required: true\n *         description: An authorization token\n *         schema:\n *           type: string\n *       - in: query\n *         name: startDate\n *         required: true\n *         description: The start date of the invoice range to retrieve\n *         schema:\n *           type: string\n *       - in: query\n *         name: endDate\n *         required: true\n *         description: The end date of the invoice range to retrieve\n *         schema:\n *           type: string\n *     responses:\n *       200:\n *         description: The invoice details\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 invoicesXML:\n *                   type: array\n *                   items:\n *                     type: string\n *                     description: The XML of an invoice\n *       400:\n *         description: Invalid date range\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 error:\n *                   type: string\n *                   description: Error message.\n *       401:\n *         description: Unauthorized access\n *       500:\n *         description: Internal server error\n */\nrouter.get(\"/invoice/showRange\",invoiceShowRange);\n\n\n/**\n * @swagger\n * /invoice/delete/{id}:\n *   delete:\n *     summary: Delete an invoice\n *     tags: [Invoices]\n *     parameters:\n *       - in: header\n *         name: token\n *         required: true\n *         description: Authentication token\n *         schema:\n *           type: string\n *       - in: path\n *         name: invoiceId\n *         required: true\n *         description: The ID of the invoice to delete\n *         schema:\n *           type: string\n *     responses:\n *       200:\n *         description: The invoice was successfully deleted\n *       401:\n *         description: Unauthorized access\n *       404:\n *         description: The invoice with the specified ID was not found\n *       500:\n *         description: Internal server error\n */\nrouter.delete(\"/invoice/delete\", invoiceDelete);\n/**\n * @swagger\n * /invoice/status/{id}:\n *   get:\n *     summary: Get the status of an invoice\n *     tags: [Invoices]\n *     parameters:\n *       - in: header\n *         name: token\n *         required: true\n *         description: An authorization token\n *         schema:\n *           type: string\n *       - in: path\n *         name: id\n *         required: true\n *         description: The ID of the invoice to check the status of\n *         schema:\n *           type: string\n *     responses:\n *       200:\n *         description: The status of the invoice\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 status:\n *                   type: string\n *                   description: The status of the invoice\n *                   enum: [unpaid, partially_paid, paid, overdue]\n *       401:\n *         description: Unauthorized access\n *       404:\n *         description: The invoice with the specified ID was not found\n *       500:\n *         description: Internal server error\n */\n\nrouter.delete(\"/clear\", (req, res) => {\n  res.json(clear());\n});\n\nexport default router;\n"]}