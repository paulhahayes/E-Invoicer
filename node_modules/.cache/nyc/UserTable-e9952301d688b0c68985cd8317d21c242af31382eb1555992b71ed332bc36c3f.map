{"version":3,"file":"/Users/yusramahomed/Desktop/seng2021--/se2021-23t1-einvoicing-api-h10a_CHEESECAKE-storage-api/src/service/UserTable.ts","sources":["/Users/yusramahomed/Desktop/seng2021--/se2021-23t1-einvoicing-api-h10a_CHEESECAKE-storage-api/src/service/UserTable.ts"],"names":[],"mappings":"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","sourcesContent":["import { db } from \"../config/firebase\";\nimport bcrypt from \"bcrypt\";\nimport HTTPError from \"http-errors\";\nimport { UserType } from \"../models/user\";\n// userRegister: checks if email has been registered\nexport const queryUserByEmail = async (email: string) => {\n  try {\n    const querySnapshot = await db\n      .collection(\"users\")\n      .where(\"email\", \"==\", email)\n      .get();\n    if (querySnapshot.empty) {\n      return false;\n    } else {\n      return true;\n    }\n  } catch (error) {\n    console.log(\"Error querying\");\n    throw HTTPError(500, error.message);\n  }\n};\n\n// authorisation in userLogin: checks if email and password are correct\nexport const queryLoginValid = async (email: string, password: string) => {\n  try {\n    const querySnapshot = await db\n      .collection(\"users\")\n      .where(\"email\", \"==\", email)\n      .get();\n    if (querySnapshot.empty) {\n      return false;\n    } else {\n      const userData = querySnapshot.docs[0].data();\n      const encrpytedPassword = userData.hash;\n      const valid = await bcrypt.compare(password, encrpytedPassword);\n      return valid;\n    }\n  } catch (error) {\n    console.log(\"Error querying\");\n    throw HTTPError(500, error.message);\n  }\n};\n\n// InvoiceStore/Show/showRange/delete: Returns userData given userId\nexport const queryUserById = async (userId: string) => {\n  try {\n    const querySnapshot = await db\n      .collection(\"users\")\n      .where(\"userId\", \"==\", userId)\n      .get();\n    if (querySnapshot.empty) {\n      throw HTTPError(404, \"User not found\");\n    }\n    return querySnapshot.docs[0].data();\n } catch (error) {\n    console.log(\"Error querying\");\n    throw HTTPError(500, error.message);\n }\n};\n\n// Used in getAllUsers\nexport const queryAllUsers = async () => {\n  try {\n    const allUsers: UserType[] = [];\n    const querySnapshot = await db.collection(\"users\").get();\n    querySnapshot.forEach((doc: any) => allUsers.push(doc.data()));\n    return allUsers;\n  } catch (error) {\n    console.log(\"Error querying\");\n    throw HTTPError(500, error.message);\n  }\n};\n\n\n// export const queryUserCount = async () => {\n//   const querySnapshot = await db.collection(\"users\").get();\n//   return querySnapshot.size;\n// };\n\n\n"]}