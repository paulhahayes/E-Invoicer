{"version":3,"file":"/Users/yusramahomed/Desktop/seng2021--/se2021-23t1-einvoicing-api-h10a_CHEESECAKE-storage-api/src/service/InvoiceTable.ts","sources":["/Users/yusramahomed/Desktop/seng2021--/se2021-23t1-einvoicing-api-h10a_CHEESECAKE-storage-api/src/service/InvoiceTable.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,+CAAwC;AACxC,4DAAoC;AAEpC,wCAAwC;AACjC,IAAM,uBAAuB,GAAG,UAAO,SAAiB;;;;;;gBAErC,qBAAM,aAAE;yBAC3B,UAAU,CAAC,UAAU,CAAC;yBACtB,KAAK,CAAC,WAAW,EAAE,IAAI,EAAE,SAAS,CAAC;yBACnC,GAAG,EAAE,EAAA;;gBAHF,aAAa,GAAG,SAGd;gBACR,IAAI,aAAa,CAAC,KAAK,EAAE;oBACvB,MAAM,IAAA,qBAAS,EAAC,GAAG,EAAE,mBAAmB,CAAC,CAAC;iBAC3C;gBACD,sBAAO,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,EAAC;;;gBAEpC,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;gBAC9B,MAAM,IAAA,qBAAS,EAAC,GAAG,EAAE,OAAK,CAAC,OAAO,CAAC,CAAC;;;;KAEvC,CAAC;AAdW,QAAA,uBAAuB,2BAclC;AAEF,6CAA6C;AACtC,IAAM,wBAAwB,GAAG,UAAO,WAAmB,EAAE,QAAgB;;;;;;gBAE1E,aAAkB,EAAE,CAAC;gBACH,qBAAM,aAAE,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,GAAG,EAAE,EAAA;;gBAAvD,aAAa,GAAI,CAAC,SAAqC,CAAC,CAAC,IAAI;gBAEnE,aAAa,CAAC,OAAO,CAAC,UAAC,GAAG;oBACtB,UAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;gBAC9B,CAAC,CAAC,CAAC;gBACG,WAAW,GAAU,EAAE,CAAC;gBAC9B,WAA8B,EAAR,aAAA,UAAQ,EAAR,sBAAQ,EAAR,IAAQ,EAAE;oBAArB,OAAO;oBAChB,IAAI,OAAO,CAAC,IAAI,CAAC,WAAW,KAAK,WAAW,IAAI,QAAQ,KAAK,CAAC,EAAE;wBAC9D,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;wBAC1B,QAAQ,EAAE,CAAC;qBACZ;iBACF;gBACD,sBAAO,WAAW,EAAC;;;gBAEnB,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;gBAC9B,MAAM,IAAA,qBAAS,EAAC,GAAG,EAAE,OAAK,CAAC,OAAO,CAAC,CAAC;;;;KAEvC,CAAC;AApBW,QAAA,wBAAwB,4BAoBnC","sourcesContent":["import { db } from \"../config/firebase\";\nimport HTTPError from \"http-errors\";\n\n// Used by invoiceShow: gets invoiceData\nexport const queryInvoiceByInvoiceId = async (invoiceId: string) => {\n  try {\n    const querySnapshot = await db\n      .collection(\"invoices\")\n      .where(\"invoiceId\", \"==\", invoiceId)\n      .get();\n    if (querySnapshot.empty) {\n      throw HTTPError(404, \"Invoice not found\");\n    }\n    return querySnapshot.docs[0].data();\n  } catch (error) {\n    console.log(\"Error querying\");\n    throw HTTPError(500, error.message);\n  }\n};\n\n// Used by invoiceShowRange: gets invoiceData\nexport const queryInvoicesByInvoiceId = async (companyName: string, quantity: number) => {\n  try {\n    const invoices: any[] = [];\n    const querySnapshot =  (await db.collection(\"invoices\").get()).docs;\n    \n    querySnapshot.forEach((doc) => {\n        invoices.push(doc.data());\n    });\n    const returnArray: any[] = [];\n    for (const invoice of invoices) {\n      if (invoice.user.companyName === companyName && quantity !== 0) {\n        returnArray.push(invoice);\n        quantity--;\n      }\n    }\n    return returnArray;\n  } catch (error) {\n    console.log(\"Error querying\");\n    throw HTTPError(500, error.message);\n  }\n};\n"]}