"use strict";function cov_yxukl0rnj(){var path="/Users/yusramahomed/Desktop/SENG2021/se2021-23t1-einvoicing-api-h10a_CHEESECAKE-storage-api/src/routes/authRoutes.ts";var hash="c4ea7aa9e598feb3a93d22e9fe4c3d26f6f00d3d";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/yusramahomed/Desktop/SENG2021/se2021-23t1-einvoicing-api-h10a_CHEESECAKE-storage-api/src/routes/authRoutes.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:16},end:{line:3,column:34}},"2":{start:{line:4,column:23},end:{line:4,column:63}},"3":{start:{line:5,column:13},end:{line:5,column:36}},"4":{start:{line:61,column:0},end:{line:61,column:65}},"5":{start:{line:109,column:0},end:{line:109,column:55}},"6":{start:{line:158,column:0},end:{line:158,column:57}},"7":{start:{line:226,column:0},end:{line:226,column:71}},"8":{start:{line:227,column:0},end:{line:227,column:25}}},fnMap:{},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},f:{},b:{},inputSourceMap:{version:3,file:"/Users/yusramahomed/Desktop/SENG2021/se2021-23t1-einvoicing-api-h10a_CHEESECAKE-storage-api/src/routes/authRoutes.ts",sources:["/Users/yusramahomed/Desktop/SENG2021/se2021-23t1-einvoicing-api-h10a_CHEESECAKE-storage-api/src/routes/authRoutes.ts"],names:[],mappings:";;AAAA,mCAAiC;AAEjC,gEAKuC;AAEvC,IAAM,MAAM,GAAG,IAAA,gBAAM,GAAE,CAAC;AACxB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAsDG;AAEH,MAAM,CAAC,IAAI,CAAC,oBAAoB,EAAE,6BAAY,CAAC,CAAC;AAEhD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA8CE;AAEF,MAAM,CAAC,IAAI,CAAC,aAAa,EAAE,0BAAS,CAAC,CAAC;AAEtC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA+CG;AACH,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE,2BAAU,CAAC,CAAC;AACxC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAkEG;AACH,MAAM,CAAC,IAAI,CAAC,uBAAuB,EAAE,gCAAe,CAAC,CAAC;AAEtD,kBAAe,MAAM,CAAC",sourcesContent:["import { Router } from \"express\";\n\nimport {\n  registerCompany,\n  registerUser,\n  loginUser,\n  logoutUser,\n} from \"../controllers/authController\";\n\nconst router = Router();\n/**\n * @swagger\n * /auth/registerUser:\n *   post:\n *     summary: Add a new user\n *     tags: [Authentication]\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             $ref: '#/components/schemas/User'\n *           example:\n *            email: z0000000@ad.unsw.edu.au\n *            password: password123\n *            name: John Smith\n *            companyKey: 0\n *         application/xml:\n *           schema:\n *             type: string\n *     responses:\n *       '200':\n *         description: The user was successfully registered\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 token:\n *                   type: string\n *                   description: An authentication token for the registered user\n *                 userId:\n *                   type: string\n *                   description: The ID of the registered user\n *       '400':\n *         description: Invalid request data\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 message:\n *                   type: string\n *                   description: Error message.\n *       '500':\n *         description: Internal server error\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 message:\n *                   type: string\n *                   description: Error message.\n */\n\nrouter.post(\"/auth/registerUser\", registerUser);\n\n/**\n* @swagger\n* /auth/login:\n*   post:\n*     summary: Login a user\n*     tags: [Authentication]\n*     requestBody:\n*       required: true\n*       content:\n*         application/json:\n*           schema:\n*             type: object\n*             properties:\n*               email:\n*                 type: string\n*                 pattern: '^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$'\n*                 description: User's account email\n*               password:\n*                 type: string\n*                 minLength: 6\n*                 description: An encrypted password used for logging in\n*           example:\n*             email: john.doe@example.com\n*             password: password123\n*     responses:\n*       '200':\n*         description: Successful login\n*         content:\n*           application/json:\n*             schema:\n*               type: object\n*               properties:\n*                 token:\n*                   type: string\n*                   description: JWT token for authentication.\n*       '400':\n*         description: Invalid email, password or user\n*         content:\n*           application/json:\n*             schema:\n*               type: object\n*               properties:\n*                 message:\n*                   type: string\n*                   description: Error message.\n*                   example: Invalid email or password.\n*/\n\nrouter.post(\"/auth/login\", loginUser);\n\n/**\n * @swagger\n * /auth/logout:\n *   post:\n *     summary: Logout a user\n *     tags: [Authentication]\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - in: header\n *         name: token\n *         required: true\n *         schema:\n *           type: string\n *           description: JWT token for authentication.\n *         example:\n *           value: Bearer someToken\n *     responses:\n *       '200':\n *         description: Successful logout\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               example: {}\n *       '401':\n *         description: Unauthorized - the provided token was invalid or expired\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 message:\n *                   type: string\n *                   description: Error message.\n *                   example: Invalid token\n *       '500':\n *         description: Internal server error\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 message:\n *                   type: string\n *                   description: Error message.\n *                   example: An error occurred while processing the request.\n */\nrouter.post(\"/auth/logout\", logoutUser);\n/**\n * @swagger\n * /auth/registerCompany:\n *   post:\n *     summary: Register a new company\n *     tags: [Authentication]\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             properties:\n *                companyEmail:\n *                  type: string\n *                  pattern: '^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$'\n *                  description: User's account email\n *                companyName:\n *                  type: string\n *                  description: The name of the company the user belongs to\n *                numEmployees:\n *                  type: integer\n *                  description: The number of employees in the company the user belongs to\n *                ABN:\n *                  type: integer\n *                  description: The ABN of the company the user belongs to\n *           example:\n *             companyName: someCompany\n *             companyEmail: company@example.com\n *             numEmployees: 10\n *             ABN: 123456789\n *     responses:\n *       '200':\n *         description: Successful registration\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 companyKey:\n *                   type: integer\n *                   description: The company key generated for the registered company.\n *             example:\n *               companyKey: 123456789\n *       '400':\n *         description: Email is invalid or company already registered\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 message:\n *                   type: string\n *                   description: Error message.\n *                   example: Email is invalid.\n *       '500':\n *         description: Internal server error\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 message:\n *                   type: string\n *                   description: Error message.\n *                   example: An error occurred while processing the request.\n */\nrouter.post(\"/auth/registerCompany\", registerCompany);\n\nexport default router;\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"c4ea7aa9e598feb3a93d22e9fe4c3d26f6f00d3d"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_yxukl0rnj=function(){return actualCoverage;};}return actualCoverage;}cov_yxukl0rnj();cov_yxukl0rnj().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});var express_1=(cov_yxukl0rnj().s[1]++,require("express"));var authController_1=(cov_yxukl0rnj().s[2]++,require("../controllers/authController"));var router=(cov_yxukl0rnj().s[3]++,(0,express_1.Router)());/**
 * @swagger
 * /auth/registerUser:
 *   post:
 *     summary: Add a new user
 *     tags: [Authentication]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/User'
 *           example:
 *            email: z0000000@ad.unsw.edu.au
 *            password: password123
 *            name: John Smith
 *            companyKey: 0
 *         application/xml:
 *           schema:
 *             type: string
 *     responses:
 *       '200':
 *         description: The user was successfully registered
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 token:
 *                   type: string
 *                   description: An authentication token for the registered user
 *                 userId:
 *                   type: string
 *                   description: The ID of the registered user
 *       '400':
 *         description: Invalid request data
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   description: Error message.
 *       '500':
 *         description: Internal server error
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   description: Error message.
 */cov_yxukl0rnj().s[4]++;router.post("/auth/registerUser",authController_1.registerUser);/**
* @swagger
* /auth/login:
*   post:
*     summary: Login a user
*     tags: [Authentication]
*     requestBody:
*       required: true
*       content:
*         application/json:
*           schema:
*             type: object
*             properties:
*               email:
*                 type: string
*                 pattern: '^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$'
*                 description: User's account email
*               password:
*                 type: string
*                 minLength: 6
*                 description: An encrypted password used for logging in
*           example:
*             email: john.doe@example.com
*             password: password123
*     responses:
*       '200':
*         description: Successful login
*         content:
*           application/json:
*             schema:
*               type: object
*               properties:
*                 token:
*                   type: string
*                   description: JWT token for authentication.
*       '400':
*         description: Invalid email, password or user
*         content:
*           application/json:
*             schema:
*               type: object
*               properties:
*                 message:
*                   type: string
*                   description: Error message.
*                   example: Invalid email or password.
*/cov_yxukl0rnj().s[5]++;router.post("/auth/login",authController_1.loginUser);/**
 * @swagger
 * /auth/logout:
 *   post:
 *     summary: Logout a user
 *     tags: [Authentication]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: header
 *         name: token
 *         required: true
 *         schema:
 *           type: string
 *           description: JWT token for authentication.
 *         example:
 *           value: Bearer someToken
 *     responses:
 *       '200':
 *         description: Successful logout
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               example: {}
 *       '401':
 *         description: Unauthorized - the provided token was invalid or expired
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   description: Error message.
 *                   example: Invalid token
 *       '500':
 *         description: Internal server error
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   description: Error message.
 *                   example: An error occurred while processing the request.
 */cov_yxukl0rnj().s[6]++;router.post("/auth/logout",authController_1.logoutUser);/**
 * @swagger
 * /auth/registerCompany:
 *   post:
 *     summary: Register a new company
 *     tags: [Authentication]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *                companyEmail:
 *                  type: string
 *                  pattern: '^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$'
 *                  description: User's account email
 *                companyName:
 *                  type: string
 *                  description: The name of the company the user belongs to
 *                numEmployees:
 *                  type: integer
 *                  description: The number of employees in the company the user belongs to
 *                ABN:
 *                  type: integer
 *                  description: The ABN of the company the user belongs to
 *           example:
 *             companyName: someCompany
 *             companyEmail: company@example.com
 *             numEmployees: 10
 *             ABN: 123456789
 *     responses:
 *       '200':
 *         description: Successful registration
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 companyKey:
 *                   type: integer
 *                   description: The company key generated for the registered company.
 *             example:
 *               companyKey: 123456789
 *       '400':
 *         description: Email is invalid or company already registered
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   description: Error message.
 *                   example: Email is invalid.
 *       '500':
 *         description: Internal server error
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   description: Error message.
 *                   example: An error occurred while processing the request.
 */cov_yxukl0rnj().s[7]++;router.post("/auth/registerCompany",authController_1.registerCompany);cov_yxukl0rnj().s[8]++;exports.default=router;//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,