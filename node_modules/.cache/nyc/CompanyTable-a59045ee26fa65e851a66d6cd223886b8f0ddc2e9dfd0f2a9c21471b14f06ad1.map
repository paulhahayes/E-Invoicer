{"version":3,"file":"/Users/yusramahomed/Desktop/seng2021--/se2021-23t1-einvoicing-api-h10a_CHEESECAKE-storage-api/src/service/CompanyTable.ts","sources":["/Users/yusramahomed/Desktop/seng2021--/se2021-23t1-einvoicing-api-h10a_CHEESECAKE-storage-api/src/service/CompanyTable.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,+CAAwC;AACxC,4DAAoC;AAEpC,sBAAsB;AACf,IAAM,kBAAkB,GAAG,UAAO,WAAmB;;;;;;gBAElC,qBAAM,aAAE;yBAC3B,UAAU,CAAC,WAAW,CAAC;yBACvB,KAAK,CAAC,aAAa,EAAE,IAAI,EAAE,WAAW,CAAC;yBACvC,GAAG,EAAE,EAAA;;gBAHF,aAAa,GAAG,SAGd;gBACR,IAAI,aAAa,CAAC,KAAK,EAAE;oBACvB,sBAAO,KAAK,EAAC;iBACd;qBAAM;oBACL,sBAAO,IAAI,EAAC;iBACb;;;;gBAED,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;gBAC9B,MAAM,IAAA,qBAAS,EAAC,GAAG,EAAE,OAAK,CAAC,OAAO,CAAC,CAAC;;;;KAEvC,CAAC;AAfW,QAAA,kBAAkB,sBAe7B;AAEF,wDAAwD;AACjD,IAAM,mBAAmB,GAAG,UAAO,YAAoB;;;;;;gBAEtC,qBAAM,aAAE;yBAC3B,UAAU,CAAC,WAAW,CAAC;yBACvB,KAAK,CAAC,cAAc,EAAE,IAAI,EAAE,YAAY,CAAC;yBACzC,GAAG,EAAE,EAAA;;gBAHF,aAAa,GAAG,SAGd;gBACR,IAAI,aAAa,CAAC,KAAK,EAAE;oBACvB,sBAAO,KAAK,EAAC;iBACd;qBAAM;oBACL,sBAAO,IAAI,EAAC;iBACb;;;;gBAEC,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;gBAC9B,MAAM,IAAA,qBAAS,EAAC,GAAG,EAAE,OAAK,CAAC,OAAO,CAAC,CAAC;;;;KAEvC,CAAC;AAfW,QAAA,mBAAmB,uBAe9B;AAEF,6CAA6C;AACtC,IAAM,qBAAqB,GAAG,UAAO,WAAmB;;;;;;gBAEvC,qBAAM,aAAE;yBAC3B,UAAU,CAAC,WAAW,CAAC;yBACvB,KAAK,CAAC,YAAY,EAAE,IAAI,EAAE,WAAW,CAAC;yBACtC,GAAG,EAAE,EAAA;;gBAHF,aAAa,GAAG,SAGd;gBACR,IAAI,aAAa,CAAC,KAAK,EAAE;oBACvB,sBAAO,KAAK,EAAC;iBACd;qBAAM;oBACL,sBAAO,IAAI,EAAC;iBACb;;;;gBAEC,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;gBAC9B,MAAM,IAAA,qBAAS,EAAC,GAAG,EAAE,OAAK,CAAC,OAAO,CAAC,CAAC;;;;KAEvC,CAAC;AAfW,QAAA,qBAAqB,yBAehC;AAEF,gDAAgD;AAChD,kEAAkE;AAClE,0BAA0B;AAC1B,qCAAqC;AACrC,kCAAkC;AAClC,QAAQ;AACR,sBAAsB;AACtB,KAAK;AAGL,iDAAiD;AACjD,kEAAkE;AAClE,+BAA+B;AAC/B,KAAK","sourcesContent":["import { db } from \"../config/firebase\";\nimport HTTPError from \"http-errors\";\n\n// For companyRegister\nexport const queryCompanyExists = async (companyName: string) => {\n  try {\n    const querySnapshot = await db\n      .collection(\"companies\")\n      .where(\"companyName\", \"==\", companyName)\n      .get();\n    if (querySnapshot.empty) {\n      return false;\n    } else {\n      return true;\n    }\n  } catch (error) {\n    console.log(\"Error querying\");\n    throw HTTPError(500, error.message);\n  }\n};\n\n// For company register: if company email already exists\nexport const queryCompanyByEmail = async (companyEmail: string) => {\n  try {\n  const querySnapshot = await db\n    .collection(\"companies\")\n    .where(\"companyEmail\", \"==\", companyEmail)\n    .get();\n  if (querySnapshot.empty) {\n    return false;\n  } else {\n    return true;\n  }\n  } catch (error) {\n    console.log(\"Error querying\");\n    throw HTTPError(500, error.message);\n  }\n};\n\n// For userRegister. checks if company exists\nexport const queryUserByCompanyKey = async (companyName: string) => {\n  try {\n  const querySnapshot = await db\n    .collection(\"companies\")\n    .where(\"companyKey\", \"==\", companyName)\n    .get();\n  if (querySnapshot.empty) {\n    return false;\n  } else {\n    return true;\n  }\n  } catch (error) {\n    console.log(\"Error querying\");\n    throw HTTPError(500, error.message);\n  }\n};\n\n// export const queryAllCompanys = async () => {\n//   const querySnapshot = await db.collection(\"companies\").get();\n//   const companies = [];\n//   querySnapshot.forEach((doc) => {\n//     companies.push(doc.data());\n//   });\n//   return companies;\n// };\n\n\n// export const queryCompanyCount = async () => {\n//   const querySnapshot = await db.collection(\"companies\").get();\n//   return querySnapshot.size;\n// };\n\n\n"]}