{"version":3,"file":"/Users/yusramahomed/Desktop/SENG2021/se2021-23t1-einvoicing-api-h10a_CHEESECAKE-storage-api/src/routes/authRoutes.ts","sources":["/Users/yusramahomed/Desktop/SENG2021/se2021-23t1-einvoicing-api-h10a_CHEESECAKE-storage-api/src/routes/authRoutes.ts"],"names":[],"mappings":";;AAAA,mCAAiC;AAEjC,gEAKuC;AAEvC,IAAM,MAAM,GAAG,IAAA,gBAAM,GAAE,CAAC;AACxB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAsDG;AAEH,MAAM,CAAC,IAAI,CAAC,oBAAoB,EAAE,6BAAY,CAAC,CAAC;AAEhD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA8CE;AAEF,MAAM,CAAC,IAAI,CAAC,aAAa,EAAE,0BAAS,CAAC,CAAC;AAEtC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA+CG;AACH,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE,2BAAU,CAAC,CAAC;AACxC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAkEG;AACH,MAAM,CAAC,IAAI,CAAC,uBAAuB,EAAE,gCAAe,CAAC,CAAC;AAEtD,kBAAe,MAAM,CAAC","sourcesContent":["import { Router } from \"express\";\n\nimport {\n  registerCompany,\n  registerUser,\n  loginUser,\n  logoutUser,\n} from \"../controllers/authController\";\n\nconst router = Router();\n/**\n * @swagger\n * /auth/registerUser:\n *   post:\n *     summary: Add a new user\n *     tags: [Authentication]\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             $ref: '#/components/schemas/User'\n *           example:\n *            email: z0000000@ad.unsw.edu.au\n *            password: password123\n *            name: John Smith\n *            companyKey: 0\n *         application/xml:\n *           schema:\n *             type: string\n *     responses:\n *       '200':\n *         description: The user was successfully registered\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 token:\n *                   type: string\n *                   description: An authentication token for the registered user\n *                 userId:\n *                   type: string\n *                   description: The ID of the registered user\n *       '400':\n *         description: Invalid request data\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 message:\n *                   type: string\n *                   description: Error message.\n *       '500':\n *         description: Internal server error\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 message:\n *                   type: string\n *                   description: Error message.\n */\n\nrouter.post(\"/auth/registerUser\", registerUser);\n\n/**\n* @swagger\n* /auth/login:\n*   post:\n*     summary: Login a user\n*     tags: [Authentication]\n*     requestBody:\n*       required: true\n*       content:\n*         application/json:\n*           schema:\n*             type: object\n*             properties:\n*               email:\n*                 type: string\n*                 pattern: '^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$'\n*                 description: User's account email\n*               password:\n*                 type: string\n*                 minLength: 6\n*                 description: An encrypted password used for logging in\n*           example:\n*             email: john.doe@example.com\n*             password: password123\n*     responses:\n*       '200':\n*         description: Successful login\n*         content:\n*           application/json:\n*             schema:\n*               type: object\n*               properties:\n*                 token:\n*                   type: string\n*                   description: JWT token for authentication.\n*       '400':\n*         description: Invalid email, password or user\n*         content:\n*           application/json:\n*             schema:\n*               type: object\n*               properties:\n*                 message:\n*                   type: string\n*                   description: Error message.\n*                   example: Invalid email or password.\n*/\n\nrouter.post(\"/auth/login\", loginUser);\n\n/**\n * @swagger\n * /auth/logout:\n *   post:\n *     summary: Logout a user\n *     tags: [Authentication]\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - in: header\n *         name: token\n *         required: true\n *         schema:\n *           type: string\n *           description: JWT token for authentication.\n *         example:\n *           value: Bearer someToken\n *     responses:\n *       '200':\n *         description: Successful logout\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               example: {}\n *       '401':\n *         description: Unauthorized - the provided token was invalid or expired\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 message:\n *                   type: string\n *                   description: Error message.\n *                   example: Invalid token\n *       '500':\n *         description: Internal server error\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 message:\n *                   type: string\n *                   description: Error message.\n *                   example: An error occurred while processing the request.\n */\nrouter.post(\"/auth/logout\", logoutUser);\n/**\n * @swagger\n * /auth/registerCompany:\n *   post:\n *     summary: Register a new company\n *     tags: [Authentication]\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             properties:\n *                companyEmail:\n *                  type: string\n *                  pattern: '^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$'\n *                  description: User's account email\n *                companyName:\n *                  type: string\n *                  description: The name of the company the user belongs to\n *                numEmployees:\n *                  type: integer\n *                  description: The number of employees in the company the user belongs to\n *                ABN:\n *                  type: integer\n *                  description: The ABN of the company the user belongs to\n *           example:\n *             companyName: someCompany\n *             companyEmail: company@example.com\n *             numEmployees: 10\n *             ABN: 123456789\n *     responses:\n *       '200':\n *         description: Successful registration\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 companyKey:\n *                   type: integer\n *                   description: The company key generated for the registered company.\n *             example:\n *               companyKey: 123456789\n *       '400':\n *         description: Email is invalid or company already registered\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 message:\n *                   type: string\n *                   description: Error message.\n *                   example: Email is invalid.\n *       '500':\n *         description: Internal server error\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 message:\n *                   type: string\n *                   description: Error message.\n *                   example: An error occurred while processing the request.\n */\nrouter.post(\"/auth/registerCompany\", registerCompany);\n\nexport default router;\n"]}